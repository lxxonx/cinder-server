// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lxxonx/cinder-server/ent/group"
)

// Group is the model entity for the Group schema.
type Group struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Groupname holds the value of the "groupname" field.
	Groupname string `json:"groupname,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio string `json:"bio,omitempty"`
	// Pics holds the value of the "pics" field.
	Pics []string `json:"pics,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// ReadAt holds the value of the "readAt" field.
	ReadAt time.Time `json:"readAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupQuery when eager-loading is set.
	Edges GroupEdges `json:"edges"`
}

// GroupEdges holds the relations/edges for other nodes in the graph.
type GroupEdges struct {
	// Members holds the value of the members edge.
	Members []*User `json:"members,omitempty"`
	// LikeFromUser holds the value of the like_from_user edge.
	LikeFromUser []*User `json:"like_from_user,omitempty"`
	// Saved holds the value of the saved edge.
	Saved []*User `json:"saved,omitempty"`
	// LikeFromGroup holds the value of the like_from_group edge.
	LikeFromGroup []*Group `json:"like_from_group,omitempty"`
	// LikeTo holds the value of the like_to edge.
	LikeTo []*Group `json:"like_to,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) MembersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// LikeFromUserOrErr returns the LikeFromUser value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) LikeFromUserOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.LikeFromUser, nil
	}
	return nil, &NotLoadedError{edge: "like_from_user"}
}

// SavedOrErr returns the Saved value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) SavedOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Saved, nil
	}
	return nil, &NotLoadedError{edge: "saved"}
}

// LikeFromGroupOrErr returns the LikeFromGroup value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) LikeFromGroupOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.LikeFromGroup, nil
	}
	return nil, &NotLoadedError{edge: "like_from_group"}
}

// LikeToOrErr returns the LikeTo value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) LikeToOrErr() ([]*Group, error) {
	if e.loadedTypes[4] {
		return e.LikeTo, nil
	}
	return nil, &NotLoadedError{edge: "like_to"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Group) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case group.FieldPics:
			values[i] = new([]byte)
		case group.FieldID, group.FieldGroupname, group.FieldBio:
			values[i] = new(sql.NullString)
		case group.FieldCreatedAt, group.FieldUpdatedAt, group.FieldReadAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Group", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Group fields.
func (gr *Group) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case group.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gr.ID = value.String
			}
		case group.FieldGroupname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field groupname", values[i])
			} else if value.Valid {
				gr.Groupname = value.String
			}
		case group.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				gr.Bio = value.String
			}
		case group.FieldPics:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field pics", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gr.Pics); err != nil {
					return fmt.Errorf("unmarshal field pics: %w", err)
				}
			}
		case group.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				gr.CreatedAt = value.Time
			}
		case group.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				gr.UpdatedAt = value.Time
			}
		case group.FieldReadAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field readAt", values[i])
			} else if value.Valid {
				gr.ReadAt = value.Time
			}
		}
	}
	return nil
}

// QueryMembers queries the "members" edge of the Group entity.
func (gr *Group) QueryMembers() *UserQuery {
	return (&GroupClient{config: gr.config}).QueryMembers(gr)
}

// QueryLikeFromUser queries the "like_from_user" edge of the Group entity.
func (gr *Group) QueryLikeFromUser() *UserQuery {
	return (&GroupClient{config: gr.config}).QueryLikeFromUser(gr)
}

// QuerySaved queries the "saved" edge of the Group entity.
func (gr *Group) QuerySaved() *UserQuery {
	return (&GroupClient{config: gr.config}).QuerySaved(gr)
}

// QueryLikeFromGroup queries the "like_from_group" edge of the Group entity.
func (gr *Group) QueryLikeFromGroup() *GroupQuery {
	return (&GroupClient{config: gr.config}).QueryLikeFromGroup(gr)
}

// QueryLikeTo queries the "like_to" edge of the Group entity.
func (gr *Group) QueryLikeTo() *GroupQuery {
	return (&GroupClient{config: gr.config}).QueryLikeTo(gr)
}

// Update returns a builder for updating this Group.
// Note that you need to call Group.Unwrap() before calling this method if this Group
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Group) Update() *GroupUpdateOne {
	return (&GroupClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the Group entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Group) Unwrap() *Group {
	tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Group is not a transactional entity")
	}
	gr.config.driver = tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Group) String() string {
	var builder strings.Builder
	builder.WriteString("Group(")
	builder.WriteString(fmt.Sprintf("id=%v", gr.ID))
	builder.WriteString(", groupname=")
	builder.WriteString(gr.Groupname)
	builder.WriteString(", bio=")
	builder.WriteString(gr.Bio)
	builder.WriteString(", pics=")
	builder.WriteString(fmt.Sprintf("%v", gr.Pics))
	builder.WriteString(", createdAt=")
	builder.WriteString(gr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(gr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", readAt=")
	builder.WriteString(gr.ReadAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Groups is a parsable slice of Group.
type Groups []*Group

func (gr Groups) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
