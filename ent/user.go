// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lxxonx/cinder-server/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ActualName holds the value of the "actual_name" field.
	// 본명
	ActualName string `json:"actual_name,omitempty"`
	// Username holds the value of the "username" field.
	// 아이디
	Username string `json:"username,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// Password holds the value of the "password" field.
	Password []byte `json:"-"`
	// Uni holds the value of the "uni" field.
	// 대학교
	Uni string `json:"uni,omitempty"`
	// Dep holds the value of the "dep" field.
	// 단과대
	Dep string `json:"dep,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio string `json:"bio,omitempty"`
	// BirthYear holds the value of the "birth_year" field.
	BirthYear int `json:"birth_year,omitempty"`
	// IsVerified holds the value of the "is_verified" field.
	IsVerified bool `json:"is_verified,omitempty"`
	// MaxGroup holds the value of the "max_group" field.
	MaxGroup int `json:"max_group,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ReadAt holds the value of the "read_at" field.
	ReadAt time.Time `json:"read_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Friends holds the value of the friends edge.
	Friends []*User `json:"friends,omitempty"`
	// Requests holds the value of the requests edge.
	Requests []*User `json:"requests,omitempty"`
	// FriendsReq holds the value of the friends_req edge.
	FriendsReq []*User `json:"friends_req,omitempty"`
	// LikeTo holds the value of the like_to edge.
	LikeTo []*Group `json:"like_to,omitempty"`
	// Save holds the value of the save edge.
	Save []*Group `json:"save,omitempty"`
	// Group holds the value of the group edge.
	Group []*Group `json:"group,omitempty"`
	// Chatroom holds the value of the chatroom edge.
	Chatroom []*ChatRoom `json:"chatroom,omitempty"`
	// Message holds the value of the message edge.
	Message []*ChatMessage `json:"message,omitempty"`
	// Pics holds the value of the pics edge.
	Pics []*Pic `json:"pics,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// FriendsOrErr returns the Friends value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FriendsOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Friends, nil
	}
	return nil, &NotLoadedError{edge: "friends"}
}

// RequestsOrErr returns the Requests value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RequestsOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Requests, nil
	}
	return nil, &NotLoadedError{edge: "requests"}
}

// FriendsReqOrErr returns the FriendsReq value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FriendsReqOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.FriendsReq, nil
	}
	return nil, &NotLoadedError{edge: "friends_req"}
}

// LikeToOrErr returns the LikeTo value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikeToOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.LikeTo, nil
	}
	return nil, &NotLoadedError{edge: "like_to"}
}

// SaveOrErr returns the Save value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SaveOrErr() ([]*Group, error) {
	if e.loadedTypes[4] {
		return e.Save, nil
	}
	return nil, &NotLoadedError{edge: "save"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroupOrErr() ([]*Group, error) {
	if e.loadedTypes[5] {
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// ChatroomOrErr returns the Chatroom value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ChatroomOrErr() ([]*ChatRoom, error) {
	if e.loadedTypes[6] {
		return e.Chatroom, nil
	}
	return nil, &NotLoadedError{edge: "chatroom"}
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MessageOrErr() ([]*ChatMessage, error) {
	if e.loadedTypes[7] {
		return e.Message, nil
	}
	return nil, &NotLoadedError{edge: "message"}
}

// PicsOrErr returns the Pics value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PicsOrErr() ([]*Pic, error) {
	if e.loadedTypes[8] {
		return e.Pics, nil
	}
	return nil, &NotLoadedError{edge: "pics"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldPassword:
			values[i] = new([]byte)
		case user.FieldIsVerified:
			values[i] = new(sql.NullBool)
		case user.FieldBirthYear, user.FieldMaxGroup:
			values[i] = new(sql.NullInt64)
		case user.FieldID, user.FieldActualName, user.FieldUsername, user.FieldGender, user.FieldUni, user.FieldDep, user.FieldBio, user.FieldAvatar:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldReadAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldActualName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field actual_name", values[i])
			} else if value.Valid {
				u.ActualName = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				u.Gender = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value != nil {
				u.Password = *value
			}
		case user.FieldUni:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uni", values[i])
			} else if value.Valid {
				u.Uni = value.String
			}
		case user.FieldDep:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dep", values[i])
			} else if value.Valid {
				u.Dep = value.String
			}
		case user.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				u.Bio = value.String
			}
		case user.FieldBirthYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field birth_year", values[i])
			} else if value.Valid {
				u.BirthYear = int(value.Int64)
			}
		case user.FieldIsVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_verified", values[i])
			} else if value.Valid {
				u.IsVerified = value.Bool
			}
		case user.FieldMaxGroup:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_group", values[i])
			} else if value.Valid {
				u.MaxGroup = int(value.Int64)
			}
		case user.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				u.Avatar = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldReadAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field read_at", values[i])
			} else if value.Valid {
				u.ReadAt = value.Time
			}
		}
	}
	return nil
}

// QueryFriends queries the "friends" edge of the User entity.
func (u *User) QueryFriends() *UserQuery {
	return (&UserClient{config: u.config}).QueryFriends(u)
}

// QueryRequests queries the "requests" edge of the User entity.
func (u *User) QueryRequests() *UserQuery {
	return (&UserClient{config: u.config}).QueryRequests(u)
}

// QueryFriendsReq queries the "friends_req" edge of the User entity.
func (u *User) QueryFriendsReq() *UserQuery {
	return (&UserClient{config: u.config}).QueryFriendsReq(u)
}

// QueryLikeTo queries the "like_to" edge of the User entity.
func (u *User) QueryLikeTo() *GroupQuery {
	return (&UserClient{config: u.config}).QueryLikeTo(u)
}

// QuerySave queries the "save" edge of the User entity.
func (u *User) QuerySave() *GroupQuery {
	return (&UserClient{config: u.config}).QuerySave(u)
}

// QueryGroup queries the "group" edge of the User entity.
func (u *User) QueryGroup() *GroupQuery {
	return (&UserClient{config: u.config}).QueryGroup(u)
}

// QueryChatroom queries the "chatroom" edge of the User entity.
func (u *User) QueryChatroom() *ChatRoomQuery {
	return (&UserClient{config: u.config}).QueryChatroom(u)
}

// QueryMessage queries the "message" edge of the User entity.
func (u *User) QueryMessage() *ChatMessageQuery {
	return (&UserClient{config: u.config}).QueryMessage(u)
}

// QueryPics queries the "pics" edge of the User entity.
func (u *User) QueryPics() *PicQuery {
	return (&UserClient{config: u.config}).QueryPics(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", actual_name=")
	builder.WriteString(u.ActualName)
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", gender=")
	builder.WriteString(u.Gender)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", uni=")
	builder.WriteString(u.Uni)
	builder.WriteString(", dep=")
	builder.WriteString(u.Dep)
	builder.WriteString(", bio=")
	builder.WriteString(u.Bio)
	builder.WriteString(", birth_year=")
	builder.WriteString(fmt.Sprintf("%v", u.BirthYear))
	builder.WriteString(", is_verified=")
	builder.WriteString(fmt.Sprintf("%v", u.IsVerified))
	builder.WriteString(", max_group=")
	builder.WriteString(fmt.Sprintf("%v", u.MaxGroup))
	builder.WriteString(", avatar=")
	builder.WriteString(u.Avatar)
	builder.WriteString(", created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", read_at=")
	builder.WriteString(u.ReadAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
