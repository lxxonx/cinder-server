// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lxxonx/cinder-server/ent/group"
	"github.com/lxxonx/cinder-server/ent/pic"
	"github.com/lxxonx/cinder-server/ent/predicate"
	"github.com/lxxonx/cinder-server/ent/user"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetGroupname sets the "groupname" field.
func (gu *GroupUpdate) SetGroupname(s string) *GroupUpdate {
	gu.mutation.SetGroupname(s)
	return gu
}

// SetNillableGroupname sets the "groupname" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableGroupname(s *string) *GroupUpdate {
	if s != nil {
		gu.SetGroupname(*s)
	}
	return gu
}

// SetBio sets the "bio" field.
func (gu *GroupUpdate) SetBio(s string) *GroupUpdate {
	gu.mutation.SetBio(s)
	return gu
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableBio(s *string) *GroupUpdate {
	if s != nil {
		gu.SetBio(*s)
	}
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GroupUpdate) SetUpdatedAt(t time.Time) *GroupUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetReadAt sets the "read_at" field.
func (gu *GroupUpdate) SetReadAt(t time.Time) *GroupUpdate {
	gu.mutation.SetReadAt(t)
	return gu
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableReadAt(t *time.Time) *GroupUpdate {
	if t != nil {
		gu.SetReadAt(*t)
	}
	return gu
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (gu *GroupUpdate) AddMemberIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddMemberIDs(ids...)
	return gu
}

// AddMembers adds the "members" edges to the User entity.
func (gu *GroupUpdate) AddMembers(u ...*User) *GroupUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddMemberIDs(ids...)
}

// AddLikeFromUserIDs adds the "like_from_user" edge to the User entity by IDs.
func (gu *GroupUpdate) AddLikeFromUserIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddLikeFromUserIDs(ids...)
	return gu
}

// AddLikeFromUser adds the "like_from_user" edges to the User entity.
func (gu *GroupUpdate) AddLikeFromUser(u ...*User) *GroupUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddLikeFromUserIDs(ids...)
}

// AddSavedIDs adds the "saved" edge to the User entity by IDs.
func (gu *GroupUpdate) AddSavedIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddSavedIDs(ids...)
	return gu
}

// AddSaved adds the "saved" edges to the User entity.
func (gu *GroupUpdate) AddSaved(u ...*User) *GroupUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddSavedIDs(ids...)
}

// AddLikeFromGroupIDs adds the "like_from_group" edge to the Group entity by IDs.
func (gu *GroupUpdate) AddLikeFromGroupIDs(ids ...uuid.UUID) *GroupUpdate {
	gu.mutation.AddLikeFromGroupIDs(ids...)
	return gu
}

// AddLikeFromGroup adds the "like_from_group" edges to the Group entity.
func (gu *GroupUpdate) AddLikeFromGroup(g ...*Group) *GroupUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddLikeFromGroupIDs(ids...)
}

// AddLikeToIDs adds the "like_to" edge to the Group entity by IDs.
func (gu *GroupUpdate) AddLikeToIDs(ids ...uuid.UUID) *GroupUpdate {
	gu.mutation.AddLikeToIDs(ids...)
	return gu
}

// AddLikeTo adds the "like_to" edges to the Group entity.
func (gu *GroupUpdate) AddLikeTo(g ...*Group) *GroupUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddLikeToIDs(ids...)
}

// AddPicIDs adds the "pics" edge to the Pic entity by IDs.
func (gu *GroupUpdate) AddPicIDs(ids ...uuid.UUID) *GroupUpdate {
	gu.mutation.AddPicIDs(ids...)
	return gu
}

// AddPics adds the "pics" edges to the Pic entity.
func (gu *GroupUpdate) AddPics(p ...*Pic) *GroupUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.AddPicIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// ClearMembers clears all "members" edges to the User entity.
func (gu *GroupUpdate) ClearMembers() *GroupUpdate {
	gu.mutation.ClearMembers()
	return gu
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (gu *GroupUpdate) RemoveMemberIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveMemberIDs(ids...)
	return gu
}

// RemoveMembers removes "members" edges to User entities.
func (gu *GroupUpdate) RemoveMembers(u ...*User) *GroupUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveMemberIDs(ids...)
}

// ClearLikeFromUser clears all "like_from_user" edges to the User entity.
func (gu *GroupUpdate) ClearLikeFromUser() *GroupUpdate {
	gu.mutation.ClearLikeFromUser()
	return gu
}

// RemoveLikeFromUserIDs removes the "like_from_user" edge to User entities by IDs.
func (gu *GroupUpdate) RemoveLikeFromUserIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveLikeFromUserIDs(ids...)
	return gu
}

// RemoveLikeFromUser removes "like_from_user" edges to User entities.
func (gu *GroupUpdate) RemoveLikeFromUser(u ...*User) *GroupUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveLikeFromUserIDs(ids...)
}

// ClearSaved clears all "saved" edges to the User entity.
func (gu *GroupUpdate) ClearSaved() *GroupUpdate {
	gu.mutation.ClearSaved()
	return gu
}

// RemoveSavedIDs removes the "saved" edge to User entities by IDs.
func (gu *GroupUpdate) RemoveSavedIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveSavedIDs(ids...)
	return gu
}

// RemoveSaved removes "saved" edges to User entities.
func (gu *GroupUpdate) RemoveSaved(u ...*User) *GroupUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveSavedIDs(ids...)
}

// ClearLikeFromGroup clears all "like_from_group" edges to the Group entity.
func (gu *GroupUpdate) ClearLikeFromGroup() *GroupUpdate {
	gu.mutation.ClearLikeFromGroup()
	return gu
}

// RemoveLikeFromGroupIDs removes the "like_from_group" edge to Group entities by IDs.
func (gu *GroupUpdate) RemoveLikeFromGroupIDs(ids ...uuid.UUID) *GroupUpdate {
	gu.mutation.RemoveLikeFromGroupIDs(ids...)
	return gu
}

// RemoveLikeFromGroup removes "like_from_group" edges to Group entities.
func (gu *GroupUpdate) RemoveLikeFromGroup(g ...*Group) *GroupUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveLikeFromGroupIDs(ids...)
}

// ClearLikeTo clears all "like_to" edges to the Group entity.
func (gu *GroupUpdate) ClearLikeTo() *GroupUpdate {
	gu.mutation.ClearLikeTo()
	return gu
}

// RemoveLikeToIDs removes the "like_to" edge to Group entities by IDs.
func (gu *GroupUpdate) RemoveLikeToIDs(ids ...uuid.UUID) *GroupUpdate {
	gu.mutation.RemoveLikeToIDs(ids...)
	return gu
}

// RemoveLikeTo removes "like_to" edges to Group entities.
func (gu *GroupUpdate) RemoveLikeTo(g ...*Group) *GroupUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveLikeToIDs(ids...)
}

// ClearPics clears all "pics" edges to the Pic entity.
func (gu *GroupUpdate) ClearPics() *GroupUpdate {
	gu.mutation.ClearPics()
	return gu
}

// RemovePicIDs removes the "pics" edge to Pic entities by IDs.
func (gu *GroupUpdate) RemovePicIDs(ids ...uuid.UUID) *GroupUpdate {
	gu.mutation.RemovePicIDs(ids...)
	return gu
}

// RemovePics removes "pics" edges to Pic entities.
func (gu *GroupUpdate) RemovePics(p ...*Pic) *GroupUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.RemovePicIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gu.defaults()
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GroupUpdate) defaults() {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		v := group.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   group.Table,
			Columns: group.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: group.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Groupname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldGroupname,
		})
	}
	if value, ok := gu.mutation.Bio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldBio,
		})
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldUpdatedAt,
		})
	}
	if value, ok := gu.mutation.ReadAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldReadAt,
		})
	}
	if gu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.MembersTable,
			Columns: group.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !gu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.MembersTable,
			Columns: group.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.MembersTable,
			Columns: group.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.LikeFromUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.LikeFromUserTable,
			Columns: group.LikeFromUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedLikeFromUserIDs(); len(nodes) > 0 && !gu.mutation.LikeFromUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.LikeFromUserTable,
			Columns: group.LikeFromUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.LikeFromUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.LikeFromUserTable,
			Columns: group.LikeFromUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.SavedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.SavedTable,
			Columns: group.SavedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedSavedIDs(); len(nodes) > 0 && !gu.mutation.SavedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.SavedTable,
			Columns: group.SavedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.SavedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.SavedTable,
			Columns: group.SavedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.LikeFromGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.LikeFromGroupTable,
			Columns: group.LikeFromGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedLikeFromGroupIDs(); len(nodes) > 0 && !gu.mutation.LikeFromGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.LikeFromGroupTable,
			Columns: group.LikeFromGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.LikeFromGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.LikeFromGroupTable,
			Columns: group.LikeFromGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.LikeToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.LikeToTable,
			Columns: group.LikeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedLikeToIDs(); len(nodes) > 0 && !gu.mutation.LikeToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.LikeToTable,
			Columns: group.LikeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.LikeToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.LikeToTable,
			Columns: group.LikeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.PicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.PicsTable,
			Columns: []string{group.PicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedPicsIDs(); len(nodes) > 0 && !gu.mutation.PicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.PicsTable,
			Columns: []string{group.PicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.PicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.PicsTable,
			Columns: []string{group.PicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetGroupname sets the "groupname" field.
func (guo *GroupUpdateOne) SetGroupname(s string) *GroupUpdateOne {
	guo.mutation.SetGroupname(s)
	return guo
}

// SetNillableGroupname sets the "groupname" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableGroupname(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetGroupname(*s)
	}
	return guo
}

// SetBio sets the "bio" field.
func (guo *GroupUpdateOne) SetBio(s string) *GroupUpdateOne {
	guo.mutation.SetBio(s)
	return guo
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableBio(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetBio(*s)
	}
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GroupUpdateOne) SetUpdatedAt(t time.Time) *GroupUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetReadAt sets the "read_at" field.
func (guo *GroupUpdateOne) SetReadAt(t time.Time) *GroupUpdateOne {
	guo.mutation.SetReadAt(t)
	return guo
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableReadAt(t *time.Time) *GroupUpdateOne {
	if t != nil {
		guo.SetReadAt(*t)
	}
	return guo
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (guo *GroupUpdateOne) AddMemberIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddMemberIDs(ids...)
	return guo
}

// AddMembers adds the "members" edges to the User entity.
func (guo *GroupUpdateOne) AddMembers(u ...*User) *GroupUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddMemberIDs(ids...)
}

// AddLikeFromUserIDs adds the "like_from_user" edge to the User entity by IDs.
func (guo *GroupUpdateOne) AddLikeFromUserIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddLikeFromUserIDs(ids...)
	return guo
}

// AddLikeFromUser adds the "like_from_user" edges to the User entity.
func (guo *GroupUpdateOne) AddLikeFromUser(u ...*User) *GroupUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddLikeFromUserIDs(ids...)
}

// AddSavedIDs adds the "saved" edge to the User entity by IDs.
func (guo *GroupUpdateOne) AddSavedIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddSavedIDs(ids...)
	return guo
}

// AddSaved adds the "saved" edges to the User entity.
func (guo *GroupUpdateOne) AddSaved(u ...*User) *GroupUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddSavedIDs(ids...)
}

// AddLikeFromGroupIDs adds the "like_from_group" edge to the Group entity by IDs.
func (guo *GroupUpdateOne) AddLikeFromGroupIDs(ids ...uuid.UUID) *GroupUpdateOne {
	guo.mutation.AddLikeFromGroupIDs(ids...)
	return guo
}

// AddLikeFromGroup adds the "like_from_group" edges to the Group entity.
func (guo *GroupUpdateOne) AddLikeFromGroup(g ...*Group) *GroupUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddLikeFromGroupIDs(ids...)
}

// AddLikeToIDs adds the "like_to" edge to the Group entity by IDs.
func (guo *GroupUpdateOne) AddLikeToIDs(ids ...uuid.UUID) *GroupUpdateOne {
	guo.mutation.AddLikeToIDs(ids...)
	return guo
}

// AddLikeTo adds the "like_to" edges to the Group entity.
func (guo *GroupUpdateOne) AddLikeTo(g ...*Group) *GroupUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddLikeToIDs(ids...)
}

// AddPicIDs adds the "pics" edge to the Pic entity by IDs.
func (guo *GroupUpdateOne) AddPicIDs(ids ...uuid.UUID) *GroupUpdateOne {
	guo.mutation.AddPicIDs(ids...)
	return guo
}

// AddPics adds the "pics" edges to the Pic entity.
func (guo *GroupUpdateOne) AddPics(p ...*Pic) *GroupUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.AddPicIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// ClearMembers clears all "members" edges to the User entity.
func (guo *GroupUpdateOne) ClearMembers() *GroupUpdateOne {
	guo.mutation.ClearMembers()
	return guo
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (guo *GroupUpdateOne) RemoveMemberIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveMemberIDs(ids...)
	return guo
}

// RemoveMembers removes "members" edges to User entities.
func (guo *GroupUpdateOne) RemoveMembers(u ...*User) *GroupUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveMemberIDs(ids...)
}

// ClearLikeFromUser clears all "like_from_user" edges to the User entity.
func (guo *GroupUpdateOne) ClearLikeFromUser() *GroupUpdateOne {
	guo.mutation.ClearLikeFromUser()
	return guo
}

// RemoveLikeFromUserIDs removes the "like_from_user" edge to User entities by IDs.
func (guo *GroupUpdateOne) RemoveLikeFromUserIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveLikeFromUserIDs(ids...)
	return guo
}

// RemoveLikeFromUser removes "like_from_user" edges to User entities.
func (guo *GroupUpdateOne) RemoveLikeFromUser(u ...*User) *GroupUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveLikeFromUserIDs(ids...)
}

// ClearSaved clears all "saved" edges to the User entity.
func (guo *GroupUpdateOne) ClearSaved() *GroupUpdateOne {
	guo.mutation.ClearSaved()
	return guo
}

// RemoveSavedIDs removes the "saved" edge to User entities by IDs.
func (guo *GroupUpdateOne) RemoveSavedIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveSavedIDs(ids...)
	return guo
}

// RemoveSaved removes "saved" edges to User entities.
func (guo *GroupUpdateOne) RemoveSaved(u ...*User) *GroupUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveSavedIDs(ids...)
}

// ClearLikeFromGroup clears all "like_from_group" edges to the Group entity.
func (guo *GroupUpdateOne) ClearLikeFromGroup() *GroupUpdateOne {
	guo.mutation.ClearLikeFromGroup()
	return guo
}

// RemoveLikeFromGroupIDs removes the "like_from_group" edge to Group entities by IDs.
func (guo *GroupUpdateOne) RemoveLikeFromGroupIDs(ids ...uuid.UUID) *GroupUpdateOne {
	guo.mutation.RemoveLikeFromGroupIDs(ids...)
	return guo
}

// RemoveLikeFromGroup removes "like_from_group" edges to Group entities.
func (guo *GroupUpdateOne) RemoveLikeFromGroup(g ...*Group) *GroupUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveLikeFromGroupIDs(ids...)
}

// ClearLikeTo clears all "like_to" edges to the Group entity.
func (guo *GroupUpdateOne) ClearLikeTo() *GroupUpdateOne {
	guo.mutation.ClearLikeTo()
	return guo
}

// RemoveLikeToIDs removes the "like_to" edge to Group entities by IDs.
func (guo *GroupUpdateOne) RemoveLikeToIDs(ids ...uuid.UUID) *GroupUpdateOne {
	guo.mutation.RemoveLikeToIDs(ids...)
	return guo
}

// RemoveLikeTo removes "like_to" edges to Group entities.
func (guo *GroupUpdateOne) RemoveLikeTo(g ...*Group) *GroupUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveLikeToIDs(ids...)
}

// ClearPics clears all "pics" edges to the Pic entity.
func (guo *GroupUpdateOne) ClearPics() *GroupUpdateOne {
	guo.mutation.ClearPics()
	return guo
}

// RemovePicIDs removes the "pics" edge to Pic entities by IDs.
func (guo *GroupUpdateOne) RemovePicIDs(ids ...uuid.UUID) *GroupUpdateOne {
	guo.mutation.RemovePicIDs(ids...)
	return guo
}

// RemovePics removes "pics" edges to Pic entities.
func (guo *GroupUpdateOne) RemovePics(p ...*Pic) *GroupUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.RemovePicIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	var (
		err  error
		node *Group
	)
	guo.defaults()
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GroupUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		v := group.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   group.Table,
			Columns: group.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: group.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Groupname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldGroupname,
		})
	}
	if value, ok := guo.mutation.Bio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldBio,
		})
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldUpdatedAt,
		})
	}
	if value, ok := guo.mutation.ReadAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldReadAt,
		})
	}
	if guo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.MembersTable,
			Columns: group.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !guo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.MembersTable,
			Columns: group.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.MembersTable,
			Columns: group.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.LikeFromUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.LikeFromUserTable,
			Columns: group.LikeFromUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedLikeFromUserIDs(); len(nodes) > 0 && !guo.mutation.LikeFromUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.LikeFromUserTable,
			Columns: group.LikeFromUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.LikeFromUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.LikeFromUserTable,
			Columns: group.LikeFromUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.SavedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.SavedTable,
			Columns: group.SavedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedSavedIDs(); len(nodes) > 0 && !guo.mutation.SavedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.SavedTable,
			Columns: group.SavedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.SavedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.SavedTable,
			Columns: group.SavedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.LikeFromGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.LikeFromGroupTable,
			Columns: group.LikeFromGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedLikeFromGroupIDs(); len(nodes) > 0 && !guo.mutation.LikeFromGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.LikeFromGroupTable,
			Columns: group.LikeFromGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.LikeFromGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.LikeFromGroupTable,
			Columns: group.LikeFromGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.LikeToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.LikeToTable,
			Columns: group.LikeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedLikeToIDs(); len(nodes) > 0 && !guo.mutation.LikeToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.LikeToTable,
			Columns: group.LikeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.LikeToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.LikeToTable,
			Columns: group.LikeToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.PicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.PicsTable,
			Columns: []string{group.PicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedPicsIDs(); len(nodes) > 0 && !guo.mutation.PicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.PicsTable,
			Columns: []string{group.PicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.PicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.PicsTable,
			Columns: []string{group.PicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
