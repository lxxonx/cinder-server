// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ChatMessagesColumns holds the columns for the "chat_messages" table.
	ChatMessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true},
		{Name: "message", Type: field.TypeString, Default: ""},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "read_at", Type: field.TypeTime},
		{Name: "room_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// ChatMessagesTable holds the schema information for the "chat_messages" table.
	ChatMessagesTable = &schema.Table{
		Name:       "chat_messages",
		Columns:    ChatMessagesColumns,
		PrimaryKey: []*schema.Column{ChatMessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "chat_messages_chat_rooms_messages",
				Columns:    []*schema.Column{ChatMessagesColumns[5]},
				RefColumns: []*schema.Column{ChatRoomsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "chat_messages_users_message",
				Columns:    []*schema.Column{ChatMessagesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ChatRoomsColumns holds the columns for the "chat_rooms" table.
	ChatRoomsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "read_at", Type: field.TypeTime},
	}
	// ChatRoomsTable holds the schema information for the "chat_rooms" table.
	ChatRoomsTable = &schema.Table{
		Name:       "chat_rooms",
		Columns:    ChatRoomsColumns,
		PrimaryKey: []*schema.Column{ChatRoomsColumns[0]},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true},
		{Name: "groupname", Type: field.TypeString, Default: ""},
		{Name: "bio", Type: field.TypeString, Default: ""},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "read_at", Type: field.TypeTime},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
	}
	// PicsColumns holds the columns for the "pics" table.
	PicsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true},
		{Name: "url", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "read_at", Type: field.TypeTime},
		{Name: "group_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// PicsTable holds the schema information for the "pics" table.
	PicsTable = &schema.Table{
		Name:       "pics",
		Columns:    PicsColumns,
		PrimaryKey: []*schema.Column{PicsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pics_groups_pics",
				Columns:    []*schema.Column{PicsColumns[6]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "pics_users_pics",
				Columns:    []*schema.Column{PicsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString},
		{Name: "password", Type: field.TypeBytes},
		{Name: "uni", Type: field.TypeString},
		{Name: "dep", Type: field.TypeString},
		{Name: "bio", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "read_at", Type: field.TypeTime},
		{Name: "group_id", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_groups_members",
				Columns:    []*schema.Column{UsersColumns[10]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ChatRoomParticipantsColumns holds the columns for the "chat_room_participants" table.
	ChatRoomParticipantsColumns = []*schema.Column{
		{Name: "chat_room_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// ChatRoomParticipantsTable holds the schema information for the "chat_room_participants" table.
	ChatRoomParticipantsTable = &schema.Table{
		Name:       "chat_room_participants",
		Columns:    ChatRoomParticipantsColumns,
		PrimaryKey: []*schema.Column{ChatRoomParticipantsColumns[0], ChatRoomParticipantsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "chat_room_participants_chat_room_id",
				Columns:    []*schema.Column{ChatRoomParticipantsColumns[0]},
				RefColumns: []*schema.Column{ChatRoomsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "chat_room_participants_user_id",
				Columns:    []*schema.Column{ChatRoomParticipantsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// GroupLikeToColumns holds the columns for the "group_like_to" table.
	GroupLikeToColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeInt},
		{Name: "like_from_group_id", Type: field.TypeInt},
	}
	// GroupLikeToTable holds the schema information for the "group_like_to" table.
	GroupLikeToTable = &schema.Table{
		Name:       "group_like_to",
		Columns:    GroupLikeToColumns,
		PrimaryKey: []*schema.Column{GroupLikeToColumns[0], GroupLikeToColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_like_to_group_id",
				Columns:    []*schema.Column{GroupLikeToColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_like_to_like_from_group_id",
				Columns:    []*schema.Column{GroupLikeToColumns[1]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserFriendsColumns holds the columns for the "user_friends" table.
	UserFriendsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "friend_id", Type: field.TypeInt},
	}
	// UserFriendsTable holds the schema information for the "user_friends" table.
	UserFriendsTable = &schema.Table{
		Name:       "user_friends",
		Columns:    UserFriendsColumns,
		PrimaryKey: []*schema.Column{UserFriendsColumns[0], UserFriendsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_friends_user_id",
				Columns:    []*schema.Column{UserFriendsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_friends_friend_id",
				Columns:    []*schema.Column{UserFriendsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserFriendsReqColumns holds the columns for the "user_friendsReq" table.
	UserFriendsReqColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "request_id", Type: field.TypeInt},
	}
	// UserFriendsReqTable holds the schema information for the "user_friendsReq" table.
	UserFriendsReqTable = &schema.Table{
		Name:       "user_friendsReq",
		Columns:    UserFriendsReqColumns,
		PrimaryKey: []*schema.Column{UserFriendsReqColumns[0], UserFriendsReqColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_friendsReq_user_id",
				Columns:    []*schema.Column{UserFriendsReqColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_friendsReq_request_id",
				Columns:    []*schema.Column{UserFriendsReqColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserLikeToColumns holds the columns for the "user_like_to" table.
	UserLikeToColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "group_id", Type: field.TypeInt},
	}
	// UserLikeToTable holds the schema information for the "user_like_to" table.
	UserLikeToTable = &schema.Table{
		Name:       "user_like_to",
		Columns:    UserLikeToColumns,
		PrimaryKey: []*schema.Column{UserLikeToColumns[0], UserLikeToColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_like_to_user_id",
				Columns:    []*schema.Column{UserLikeToColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_like_to_group_id",
				Columns:    []*schema.Column{UserLikeToColumns[1]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserSaveColumns holds the columns for the "user_save" table.
	UserSaveColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "group_id", Type: field.TypeInt},
	}
	// UserSaveTable holds the schema information for the "user_save" table.
	UserSaveTable = &schema.Table{
		Name:       "user_save",
		Columns:    UserSaveColumns,
		PrimaryKey: []*schema.Column{UserSaveColumns[0], UserSaveColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_save_user_id",
				Columns:    []*schema.Column{UserSaveColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_save_group_id",
				Columns:    []*schema.Column{UserSaveColumns[1]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ChatMessagesTable,
		ChatRoomsTable,
		GroupsTable,
		PicsTable,
		UsersTable,
		ChatRoomParticipantsTable,
		GroupLikeToTable,
		UserFriendsTable,
		UserFriendsReqTable,
		UserLikeToTable,
		UserSaveTable,
	}
)

func init() {
	ChatMessagesTable.ForeignKeys[0].RefTable = ChatRoomsTable
	ChatMessagesTable.ForeignKeys[1].RefTable = UsersTable
	PicsTable.ForeignKeys[0].RefTable = GroupsTable
	PicsTable.ForeignKeys[1].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = GroupsTable
	ChatRoomParticipantsTable.ForeignKeys[0].RefTable = ChatRoomsTable
	ChatRoomParticipantsTable.ForeignKeys[1].RefTable = UsersTable
	GroupLikeToTable.ForeignKeys[0].RefTable = GroupsTable
	GroupLikeToTable.ForeignKeys[1].RefTable = GroupsTable
	UserFriendsTable.ForeignKeys[0].RefTable = UsersTable
	UserFriendsTable.ForeignKeys[1].RefTable = UsersTable
	UserFriendsReqTable.ForeignKeys[0].RefTable = UsersTable
	UserFriendsReqTable.ForeignKeys[1].RefTable = UsersTable
	UserLikeToTable.ForeignKeys[0].RefTable = UsersTable
	UserLikeToTable.ForeignKeys[1].RefTable = GroupsTable
	UserSaveTable.ForeignKeys[0].RefTable = UsersTable
	UserSaveTable.ForeignKeys[1].RefTable = GroupsTable
}
