// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/lxxonx/cinder-server/ent/chatmessage"
	"github.com/lxxonx/cinder-server/ent/chatroom"
	"github.com/lxxonx/cinder-server/ent/group"
	"github.com/lxxonx/cinder-server/ent/predicate"
	"github.com/lxxonx/cinder-server/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChatMessage = "ChatMessage"
	TypeChatRoom    = "ChatRoom"
	TypeGroup       = "Group"
	TypeUser        = "User"
)

// ChatMessageMutation represents an operation that mutates the ChatMessage nodes in the graph.
type ChatMessageMutation struct {
	config
	op            Op
	typ           string
	id            *string
	message       *string
	createdAt     *time.Time
	readAt        *time.Time
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	room          *string
	clearedroom   bool
	done          bool
	oldValue      func(context.Context) (*ChatMessage, error)
	predicates    []predicate.ChatMessage
}

var _ ent.Mutation = (*ChatMessageMutation)(nil)

// chatmessageOption allows management of the mutation configuration using functional options.
type chatmessageOption func(*ChatMessageMutation)

// newChatMessageMutation creates new mutation for the ChatMessage entity.
func newChatMessageMutation(c config, op Op, opts ...chatmessageOption) *ChatMessageMutation {
	m := &ChatMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeChatMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatMessageID sets the ID field of the mutation.
func withChatMessageID(id string) chatmessageOption {
	return func(m *ChatMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatMessage
		)
		m.oldValue = func(ctx context.Context) (*ChatMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatMessage sets the old ChatMessage of the mutation.
func withChatMessage(node *ChatMessage) chatmessageOption {
	return func(m *ChatMessageMutation) {
		m.oldValue = func(context.Context) (*ChatMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ChatMessage entities.
func (m *ChatMessageMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatMessageMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatMessageMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChatMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMessage sets the "message" field.
func (m *ChatMessageMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *ChatMessageMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the ChatMessage entity.
// If the ChatMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMessageMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *ChatMessageMutation) ResetMessage() {
	m.message = nil
}

// SetRoomID sets the "room_id" field.
func (m *ChatMessageMutation) SetRoomID(s string) {
	m.room = &s
}

// RoomID returns the value of the "room_id" field in the mutation.
func (m *ChatMessageMutation) RoomID() (r string, exists bool) {
	v := m.room
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomID returns the old "room_id" field's value of the ChatMessage entity.
// If the ChatMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMessageMutation) OldRoomID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoomID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoomID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomID: %w", err)
	}
	return oldValue.RoomID, nil
}

// ClearRoomID clears the value of the "room_id" field.
func (m *ChatMessageMutation) ClearRoomID() {
	m.room = nil
	m.clearedFields[chatmessage.FieldRoomID] = struct{}{}
}

// RoomIDCleared returns if the "room_id" field was cleared in this mutation.
func (m *ChatMessageMutation) RoomIDCleared() bool {
	_, ok := m.clearedFields[chatmessage.FieldRoomID]
	return ok
}

// ResetRoomID resets all changes to the "room_id" field.
func (m *ChatMessageMutation) ResetRoomID() {
	m.room = nil
	delete(m.clearedFields, chatmessage.FieldRoomID)
}

// SetUserID sets the "user_id" field.
func (m *ChatMessageMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ChatMessageMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ChatMessage entity.
// If the ChatMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMessageMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *ChatMessageMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[chatmessage.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *ChatMessageMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[chatmessage.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ChatMessageMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, chatmessage.FieldUserID)
}

// SetCreatedAt sets the "createdAt" field.
func (m *ChatMessageMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *ChatMessageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the ChatMessage entity.
// If the ChatMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMessageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *ChatMessageMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetReadAt sets the "readAt" field.
func (m *ChatMessageMutation) SetReadAt(t time.Time) {
	m.readAt = &t
}

// ReadAt returns the value of the "readAt" field in the mutation.
func (m *ChatMessageMutation) ReadAt() (r time.Time, exists bool) {
	v := m.readAt
	if v == nil {
		return
	}
	return *v, true
}

// OldReadAt returns the old "readAt" field's value of the ChatMessage entity.
// If the ChatMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMessageMutation) OldReadAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReadAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReadAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReadAt: %w", err)
	}
	return oldValue.ReadAt, nil
}

// ResetReadAt resets all changes to the "readAt" field.
func (m *ChatMessageMutation) ResetReadAt() {
	m.readAt = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ChatMessageMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ChatMessageMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ChatMessageMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ChatMessageMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearRoom clears the "room" edge to the ChatRoom entity.
func (m *ChatMessageMutation) ClearRoom() {
	m.clearedroom = true
}

// RoomCleared reports if the "room" edge to the ChatRoom entity was cleared.
func (m *ChatMessageMutation) RoomCleared() bool {
	return m.RoomIDCleared() || m.clearedroom
}

// RoomIDs returns the "room" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *ChatMessageMutation) RoomIDs() (ids []string) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom resets all changes to the "room" edge.
func (m *ChatMessageMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// Where appends a list predicates to the ChatMessageMutation builder.
func (m *ChatMessageMutation) Where(ps ...predicate.ChatMessage) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChatMessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ChatMessage).
func (m *ChatMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatMessageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.message != nil {
		fields = append(fields, chatmessage.FieldMessage)
	}
	if m.room != nil {
		fields = append(fields, chatmessage.FieldRoomID)
	}
	if m.user != nil {
		fields = append(fields, chatmessage.FieldUserID)
	}
	if m.createdAt != nil {
		fields = append(fields, chatmessage.FieldCreatedAt)
	}
	if m.readAt != nil {
		fields = append(fields, chatmessage.FieldReadAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chatmessage.FieldMessage:
		return m.Message()
	case chatmessage.FieldRoomID:
		return m.RoomID()
	case chatmessage.FieldUserID:
		return m.UserID()
	case chatmessage.FieldCreatedAt:
		return m.CreatedAt()
	case chatmessage.FieldReadAt:
		return m.ReadAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chatmessage.FieldMessage:
		return m.OldMessage(ctx)
	case chatmessage.FieldRoomID:
		return m.OldRoomID(ctx)
	case chatmessage.FieldUserID:
		return m.OldUserID(ctx)
	case chatmessage.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case chatmessage.FieldReadAt:
		return m.OldReadAt(ctx)
	}
	return nil, fmt.Errorf("unknown ChatMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chatmessage.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case chatmessage.FieldRoomID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomID(v)
		return nil
	case chatmessage.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case chatmessage.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case chatmessage.FieldReadAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReadAt(v)
		return nil
	}
	return fmt.Errorf("unknown ChatMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChatMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatMessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(chatmessage.FieldRoomID) {
		fields = append(fields, chatmessage.FieldRoomID)
	}
	if m.FieldCleared(chatmessage.FieldUserID) {
		fields = append(fields, chatmessage.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatMessageMutation) ClearField(name string) error {
	switch name {
	case chatmessage.FieldRoomID:
		m.ClearRoomID()
		return nil
	case chatmessage.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown ChatMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatMessageMutation) ResetField(name string) error {
	switch name {
	case chatmessage.FieldMessage:
		m.ResetMessage()
		return nil
	case chatmessage.FieldRoomID:
		m.ResetRoomID()
		return nil
	case chatmessage.FieldUserID:
		m.ResetUserID()
		return nil
	case chatmessage.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case chatmessage.FieldReadAt:
		m.ResetReadAt()
		return nil
	}
	return fmt.Errorf("unknown ChatMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, chatmessage.EdgeUser)
	}
	if m.room != nil {
		edges = append(edges, chatmessage.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatMessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chatmessage.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case chatmessage.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatMessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, chatmessage.EdgeUser)
	}
	if m.clearedroom {
		edges = append(edges, chatmessage.EdgeRoom)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatMessageMutation) EdgeCleared(name string) bool {
	switch name {
	case chatmessage.EdgeUser:
		return m.cleareduser
	case chatmessage.EdgeRoom:
		return m.clearedroom
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatMessageMutation) ClearEdge(name string) error {
	switch name {
	case chatmessage.EdgeUser:
		m.ClearUser()
		return nil
	case chatmessage.EdgeRoom:
		m.ClearRoom()
		return nil
	}
	return fmt.Errorf("unknown ChatMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatMessageMutation) ResetEdge(name string) error {
	switch name {
	case chatmessage.EdgeUser:
		m.ResetUser()
		return nil
	case chatmessage.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown ChatMessage edge %s", name)
}

// ChatRoomMutation represents an operation that mutates the ChatRoom nodes in the graph.
type ChatRoomMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	createdAt           *time.Time
	updatedAt           *time.Time
	readAt              *time.Time
	clearedFields       map[string]struct{}
	participants        map[string]struct{}
	removedparticipants map[string]struct{}
	clearedparticipants bool
	messages            map[string]struct{}
	removedmessages     map[string]struct{}
	clearedmessages     bool
	done                bool
	oldValue            func(context.Context) (*ChatRoom, error)
	predicates          []predicate.ChatRoom
}

var _ ent.Mutation = (*ChatRoomMutation)(nil)

// chatroomOption allows management of the mutation configuration using functional options.
type chatroomOption func(*ChatRoomMutation)

// newChatRoomMutation creates new mutation for the ChatRoom entity.
func newChatRoomMutation(c config, op Op, opts ...chatroomOption) *ChatRoomMutation {
	m := &ChatRoomMutation{
		config:        c,
		op:            op,
		typ:           TypeChatRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatRoomID sets the ID field of the mutation.
func withChatRoomID(id string) chatroomOption {
	return func(m *ChatRoomMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatRoom
		)
		m.oldValue = func(ctx context.Context) (*ChatRoom, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatRoom.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatRoom sets the old ChatRoom of the mutation.
func withChatRoom(node *ChatRoom) chatroomOption {
	return func(m *ChatRoomMutation) {
		m.oldValue = func(context.Context) (*ChatRoom, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatRoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatRoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ChatRoom entities.
func (m *ChatRoomMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatRoomMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatRoomMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChatRoom.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "createdAt" field.
func (m *ChatRoomMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *ChatRoomMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the ChatRoom entity.
// If the ChatRoom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatRoomMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *ChatRoomMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *ChatRoomMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *ChatRoomMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the ChatRoom entity.
// If the ChatRoom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatRoomMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *ChatRoomMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetReadAt sets the "readAt" field.
func (m *ChatRoomMutation) SetReadAt(t time.Time) {
	m.readAt = &t
}

// ReadAt returns the value of the "readAt" field in the mutation.
func (m *ChatRoomMutation) ReadAt() (r time.Time, exists bool) {
	v := m.readAt
	if v == nil {
		return
	}
	return *v, true
}

// OldReadAt returns the old "readAt" field's value of the ChatRoom entity.
// If the ChatRoom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatRoomMutation) OldReadAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReadAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReadAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReadAt: %w", err)
	}
	return oldValue.ReadAt, nil
}

// ResetReadAt resets all changes to the "readAt" field.
func (m *ChatRoomMutation) ResetReadAt() {
	m.readAt = nil
}

// AddParticipantIDs adds the "participants" edge to the User entity by ids.
func (m *ChatRoomMutation) AddParticipantIDs(ids ...string) {
	if m.participants == nil {
		m.participants = make(map[string]struct{})
	}
	for i := range ids {
		m.participants[ids[i]] = struct{}{}
	}
}

// ClearParticipants clears the "participants" edge to the User entity.
func (m *ChatRoomMutation) ClearParticipants() {
	m.clearedparticipants = true
}

// ParticipantsCleared reports if the "participants" edge to the User entity was cleared.
func (m *ChatRoomMutation) ParticipantsCleared() bool {
	return m.clearedparticipants
}

// RemoveParticipantIDs removes the "participants" edge to the User entity by IDs.
func (m *ChatRoomMutation) RemoveParticipantIDs(ids ...string) {
	if m.removedparticipants == nil {
		m.removedparticipants = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.participants, ids[i])
		m.removedparticipants[ids[i]] = struct{}{}
	}
}

// RemovedParticipants returns the removed IDs of the "participants" edge to the User entity.
func (m *ChatRoomMutation) RemovedParticipantsIDs() (ids []string) {
	for id := range m.removedparticipants {
		ids = append(ids, id)
	}
	return
}

// ParticipantsIDs returns the "participants" edge IDs in the mutation.
func (m *ChatRoomMutation) ParticipantsIDs() (ids []string) {
	for id := range m.participants {
		ids = append(ids, id)
	}
	return
}

// ResetParticipants resets all changes to the "participants" edge.
func (m *ChatRoomMutation) ResetParticipants() {
	m.participants = nil
	m.clearedparticipants = false
	m.removedparticipants = nil
}

// AddMessageIDs adds the "messages" edge to the ChatMessage entity by ids.
func (m *ChatRoomMutation) AddMessageIDs(ids ...string) {
	if m.messages == nil {
		m.messages = make(map[string]struct{})
	}
	for i := range ids {
		m.messages[ids[i]] = struct{}{}
	}
}

// ClearMessages clears the "messages" edge to the ChatMessage entity.
func (m *ChatRoomMutation) ClearMessages() {
	m.clearedmessages = true
}

// MessagesCleared reports if the "messages" edge to the ChatMessage entity was cleared.
func (m *ChatRoomMutation) MessagesCleared() bool {
	return m.clearedmessages
}

// RemoveMessageIDs removes the "messages" edge to the ChatMessage entity by IDs.
func (m *ChatRoomMutation) RemoveMessageIDs(ids ...string) {
	if m.removedmessages == nil {
		m.removedmessages = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.messages, ids[i])
		m.removedmessages[ids[i]] = struct{}{}
	}
}

// RemovedMessages returns the removed IDs of the "messages" edge to the ChatMessage entity.
func (m *ChatRoomMutation) RemovedMessagesIDs() (ids []string) {
	for id := range m.removedmessages {
		ids = append(ids, id)
	}
	return
}

// MessagesIDs returns the "messages" edge IDs in the mutation.
func (m *ChatRoomMutation) MessagesIDs() (ids []string) {
	for id := range m.messages {
		ids = append(ids, id)
	}
	return
}

// ResetMessages resets all changes to the "messages" edge.
func (m *ChatRoomMutation) ResetMessages() {
	m.messages = nil
	m.clearedmessages = false
	m.removedmessages = nil
}

// Where appends a list predicates to the ChatRoomMutation builder.
func (m *ChatRoomMutation) Where(ps ...predicate.ChatRoom) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChatRoomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ChatRoom).
func (m *ChatRoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatRoomMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.createdAt != nil {
		fields = append(fields, chatroom.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, chatroom.FieldUpdatedAt)
	}
	if m.readAt != nil {
		fields = append(fields, chatroom.FieldReadAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatRoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chatroom.FieldCreatedAt:
		return m.CreatedAt()
	case chatroom.FieldUpdatedAt:
		return m.UpdatedAt()
	case chatroom.FieldReadAt:
		return m.ReadAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatRoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chatroom.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case chatroom.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case chatroom.FieldReadAt:
		return m.OldReadAt(ctx)
	}
	return nil, fmt.Errorf("unknown ChatRoom field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatRoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chatroom.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case chatroom.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case chatroom.FieldReadAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReadAt(v)
		return nil
	}
	return fmt.Errorf("unknown ChatRoom field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatRoomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatRoomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatRoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChatRoom numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatRoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatRoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatRoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChatRoom nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatRoomMutation) ResetField(name string) error {
	switch name {
	case chatroom.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case chatroom.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case chatroom.FieldReadAt:
		m.ResetReadAt()
		return nil
	}
	return fmt.Errorf("unknown ChatRoom field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatRoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.participants != nil {
		edges = append(edges, chatroom.EdgeParticipants)
	}
	if m.messages != nil {
		edges = append(edges, chatroom.EdgeMessages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatRoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chatroom.EdgeParticipants:
		ids := make([]ent.Value, 0, len(m.participants))
		for id := range m.participants {
			ids = append(ids, id)
		}
		return ids
	case chatroom.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.messages))
		for id := range m.messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatRoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedparticipants != nil {
		edges = append(edges, chatroom.EdgeParticipants)
	}
	if m.removedmessages != nil {
		edges = append(edges, chatroom.EdgeMessages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatRoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case chatroom.EdgeParticipants:
		ids := make([]ent.Value, 0, len(m.removedparticipants))
		for id := range m.removedparticipants {
			ids = append(ids, id)
		}
		return ids
	case chatroom.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.removedmessages))
		for id := range m.removedmessages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatRoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparticipants {
		edges = append(edges, chatroom.EdgeParticipants)
	}
	if m.clearedmessages {
		edges = append(edges, chatroom.EdgeMessages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatRoomMutation) EdgeCleared(name string) bool {
	switch name {
	case chatroom.EdgeParticipants:
		return m.clearedparticipants
	case chatroom.EdgeMessages:
		return m.clearedmessages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatRoomMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ChatRoom unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatRoomMutation) ResetEdge(name string) error {
	switch name {
	case chatroom.EdgeParticipants:
		m.ResetParticipants()
		return nil
	case chatroom.EdgeMessages:
		m.ResetMessages()
		return nil
	}
	return fmt.Errorf("unknown ChatRoom edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op                     Op
	typ                    string
	id                     *string
	groupname              *string
	bio                    *string
	pics                   *[]string
	createdAt              *time.Time
	updatedAt              *time.Time
	readAt                 *time.Time
	clearedFields          map[string]struct{}
	members                map[string]struct{}
	removedmembers         map[string]struct{}
	clearedmembers         bool
	like_from_user         map[string]struct{}
	removedlike_from_user  map[string]struct{}
	clearedlike_from_user  bool
	saved                  map[string]struct{}
	removedsaved           map[string]struct{}
	clearedsaved           bool
	like_from_group        map[string]struct{}
	removedlike_from_group map[string]struct{}
	clearedlike_from_group bool
	like_to                map[string]struct{}
	removedlike_to         map[string]struct{}
	clearedlike_to         bool
	done                   bool
	oldValue               func(context.Context) (*Group, error)
	predicates             []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id string) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Group entities.
func (m *GroupMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGroupname sets the "groupname" field.
func (m *GroupMutation) SetGroupname(s string) {
	m.groupname = &s
}

// Groupname returns the value of the "groupname" field in the mutation.
func (m *GroupMutation) Groupname() (r string, exists bool) {
	v := m.groupname
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupname returns the old "groupname" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldGroupname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupname: %w", err)
	}
	return oldValue.Groupname, nil
}

// ResetGroupname resets all changes to the "groupname" field.
func (m *GroupMutation) ResetGroupname() {
	m.groupname = nil
}

// SetBio sets the "bio" field.
func (m *GroupMutation) SetBio(s string) {
	m.bio = &s
}

// Bio returns the value of the "bio" field in the mutation.
func (m *GroupMutation) Bio() (r string, exists bool) {
	v := m.bio
	if v == nil {
		return
	}
	return *v, true
}

// OldBio returns the old "bio" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldBio(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBio: %w", err)
	}
	return oldValue.Bio, nil
}

// ResetBio resets all changes to the "bio" field.
func (m *GroupMutation) ResetBio() {
	m.bio = nil
}

// SetPics sets the "pics" field.
func (m *GroupMutation) SetPics(s []string) {
	m.pics = &s
}

// Pics returns the value of the "pics" field in the mutation.
func (m *GroupMutation) Pics() (r []string, exists bool) {
	v := m.pics
	if v == nil {
		return
	}
	return *v, true
}

// OldPics returns the old "pics" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldPics(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPics is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPics requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPics: %w", err)
	}
	return oldValue.Pics, nil
}

// ResetPics resets all changes to the "pics" field.
func (m *GroupMutation) ResetPics() {
	m.pics = nil
}

// SetCreatedAt sets the "createdAt" field.
func (m *GroupMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *GroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *GroupMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *GroupMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *GroupMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *GroupMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetReadAt sets the "readAt" field.
func (m *GroupMutation) SetReadAt(t time.Time) {
	m.readAt = &t
}

// ReadAt returns the value of the "readAt" field in the mutation.
func (m *GroupMutation) ReadAt() (r time.Time, exists bool) {
	v := m.readAt
	if v == nil {
		return
	}
	return *v, true
}

// OldReadAt returns the old "readAt" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldReadAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReadAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReadAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReadAt: %w", err)
	}
	return oldValue.ReadAt, nil
}

// ResetReadAt resets all changes to the "readAt" field.
func (m *GroupMutation) ResetReadAt() {
	m.readAt = nil
}

// AddMemberIDs adds the "members" edge to the User entity by ids.
func (m *GroupMutation) AddMemberIDs(ids ...string) {
	if m.members == nil {
		m.members = make(map[string]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the User entity.
func (m *GroupMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the User entity was cleared.
func (m *GroupMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the User entity by IDs.
func (m *GroupMutation) RemoveMemberIDs(ids ...string) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the User entity.
func (m *GroupMutation) RemovedMembersIDs() (ids []string) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *GroupMutation) MembersIDs() (ids []string) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *GroupMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// AddLikeFromUserIDs adds the "like_from_user" edge to the User entity by ids.
func (m *GroupMutation) AddLikeFromUserIDs(ids ...string) {
	if m.like_from_user == nil {
		m.like_from_user = make(map[string]struct{})
	}
	for i := range ids {
		m.like_from_user[ids[i]] = struct{}{}
	}
}

// ClearLikeFromUser clears the "like_from_user" edge to the User entity.
func (m *GroupMutation) ClearLikeFromUser() {
	m.clearedlike_from_user = true
}

// LikeFromUserCleared reports if the "like_from_user" edge to the User entity was cleared.
func (m *GroupMutation) LikeFromUserCleared() bool {
	return m.clearedlike_from_user
}

// RemoveLikeFromUserIDs removes the "like_from_user" edge to the User entity by IDs.
func (m *GroupMutation) RemoveLikeFromUserIDs(ids ...string) {
	if m.removedlike_from_user == nil {
		m.removedlike_from_user = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.like_from_user, ids[i])
		m.removedlike_from_user[ids[i]] = struct{}{}
	}
}

// RemovedLikeFromUser returns the removed IDs of the "like_from_user" edge to the User entity.
func (m *GroupMutation) RemovedLikeFromUserIDs() (ids []string) {
	for id := range m.removedlike_from_user {
		ids = append(ids, id)
	}
	return
}

// LikeFromUserIDs returns the "like_from_user" edge IDs in the mutation.
func (m *GroupMutation) LikeFromUserIDs() (ids []string) {
	for id := range m.like_from_user {
		ids = append(ids, id)
	}
	return
}

// ResetLikeFromUser resets all changes to the "like_from_user" edge.
func (m *GroupMutation) ResetLikeFromUser() {
	m.like_from_user = nil
	m.clearedlike_from_user = false
	m.removedlike_from_user = nil
}

// AddSavedIDs adds the "saved" edge to the User entity by ids.
func (m *GroupMutation) AddSavedIDs(ids ...string) {
	if m.saved == nil {
		m.saved = make(map[string]struct{})
	}
	for i := range ids {
		m.saved[ids[i]] = struct{}{}
	}
}

// ClearSaved clears the "saved" edge to the User entity.
func (m *GroupMutation) ClearSaved() {
	m.clearedsaved = true
}

// SavedCleared reports if the "saved" edge to the User entity was cleared.
func (m *GroupMutation) SavedCleared() bool {
	return m.clearedsaved
}

// RemoveSavedIDs removes the "saved" edge to the User entity by IDs.
func (m *GroupMutation) RemoveSavedIDs(ids ...string) {
	if m.removedsaved == nil {
		m.removedsaved = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.saved, ids[i])
		m.removedsaved[ids[i]] = struct{}{}
	}
}

// RemovedSaved returns the removed IDs of the "saved" edge to the User entity.
func (m *GroupMutation) RemovedSavedIDs() (ids []string) {
	for id := range m.removedsaved {
		ids = append(ids, id)
	}
	return
}

// SavedIDs returns the "saved" edge IDs in the mutation.
func (m *GroupMutation) SavedIDs() (ids []string) {
	for id := range m.saved {
		ids = append(ids, id)
	}
	return
}

// ResetSaved resets all changes to the "saved" edge.
func (m *GroupMutation) ResetSaved() {
	m.saved = nil
	m.clearedsaved = false
	m.removedsaved = nil
}

// AddLikeFromGroupIDs adds the "like_from_group" edge to the Group entity by ids.
func (m *GroupMutation) AddLikeFromGroupIDs(ids ...string) {
	if m.like_from_group == nil {
		m.like_from_group = make(map[string]struct{})
	}
	for i := range ids {
		m.like_from_group[ids[i]] = struct{}{}
	}
}

// ClearLikeFromGroup clears the "like_from_group" edge to the Group entity.
func (m *GroupMutation) ClearLikeFromGroup() {
	m.clearedlike_from_group = true
}

// LikeFromGroupCleared reports if the "like_from_group" edge to the Group entity was cleared.
func (m *GroupMutation) LikeFromGroupCleared() bool {
	return m.clearedlike_from_group
}

// RemoveLikeFromGroupIDs removes the "like_from_group" edge to the Group entity by IDs.
func (m *GroupMutation) RemoveLikeFromGroupIDs(ids ...string) {
	if m.removedlike_from_group == nil {
		m.removedlike_from_group = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.like_from_group, ids[i])
		m.removedlike_from_group[ids[i]] = struct{}{}
	}
}

// RemovedLikeFromGroup returns the removed IDs of the "like_from_group" edge to the Group entity.
func (m *GroupMutation) RemovedLikeFromGroupIDs() (ids []string) {
	for id := range m.removedlike_from_group {
		ids = append(ids, id)
	}
	return
}

// LikeFromGroupIDs returns the "like_from_group" edge IDs in the mutation.
func (m *GroupMutation) LikeFromGroupIDs() (ids []string) {
	for id := range m.like_from_group {
		ids = append(ids, id)
	}
	return
}

// ResetLikeFromGroup resets all changes to the "like_from_group" edge.
func (m *GroupMutation) ResetLikeFromGroup() {
	m.like_from_group = nil
	m.clearedlike_from_group = false
	m.removedlike_from_group = nil
}

// AddLikeToIDs adds the "like_to" edge to the Group entity by ids.
func (m *GroupMutation) AddLikeToIDs(ids ...string) {
	if m.like_to == nil {
		m.like_to = make(map[string]struct{})
	}
	for i := range ids {
		m.like_to[ids[i]] = struct{}{}
	}
}

// ClearLikeTo clears the "like_to" edge to the Group entity.
func (m *GroupMutation) ClearLikeTo() {
	m.clearedlike_to = true
}

// LikeToCleared reports if the "like_to" edge to the Group entity was cleared.
func (m *GroupMutation) LikeToCleared() bool {
	return m.clearedlike_to
}

// RemoveLikeToIDs removes the "like_to" edge to the Group entity by IDs.
func (m *GroupMutation) RemoveLikeToIDs(ids ...string) {
	if m.removedlike_to == nil {
		m.removedlike_to = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.like_to, ids[i])
		m.removedlike_to[ids[i]] = struct{}{}
	}
}

// RemovedLikeTo returns the removed IDs of the "like_to" edge to the Group entity.
func (m *GroupMutation) RemovedLikeToIDs() (ids []string) {
	for id := range m.removedlike_to {
		ids = append(ids, id)
	}
	return
}

// LikeToIDs returns the "like_to" edge IDs in the mutation.
func (m *GroupMutation) LikeToIDs() (ids []string) {
	for id := range m.like_to {
		ids = append(ids, id)
	}
	return
}

// ResetLikeTo resets all changes to the "like_to" edge.
func (m *GroupMutation) ResetLikeTo() {
	m.like_to = nil
	m.clearedlike_to = false
	m.removedlike_to = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.groupname != nil {
		fields = append(fields, group.FieldGroupname)
	}
	if m.bio != nil {
		fields = append(fields, group.FieldBio)
	}
	if m.pics != nil {
		fields = append(fields, group.FieldPics)
	}
	if m.createdAt != nil {
		fields = append(fields, group.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, group.FieldUpdatedAt)
	}
	if m.readAt != nil {
		fields = append(fields, group.FieldReadAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldGroupname:
		return m.Groupname()
	case group.FieldBio:
		return m.Bio()
	case group.FieldPics:
		return m.Pics()
	case group.FieldCreatedAt:
		return m.CreatedAt()
	case group.FieldUpdatedAt:
		return m.UpdatedAt()
	case group.FieldReadAt:
		return m.ReadAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldGroupname:
		return m.OldGroupname(ctx)
	case group.FieldBio:
		return m.OldBio(ctx)
	case group.FieldPics:
		return m.OldPics(ctx)
	case group.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case group.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case group.FieldReadAt:
		return m.OldReadAt(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldGroupname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupname(v)
		return nil
	case group.FieldBio:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBio(v)
		return nil
	case group.FieldPics:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPics(v)
		return nil
	case group.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case group.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case group.FieldReadAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReadAt(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldGroupname:
		m.ResetGroupname()
		return nil
	case group.FieldBio:
		m.ResetBio()
		return nil
	case group.FieldPics:
		m.ResetPics()
		return nil
	case group.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case group.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case group.FieldReadAt:
		m.ResetReadAt()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.members != nil {
		edges = append(edges, group.EdgeMembers)
	}
	if m.like_from_user != nil {
		edges = append(edges, group.EdgeLikeFromUser)
	}
	if m.saved != nil {
		edges = append(edges, group.EdgeSaved)
	}
	if m.like_from_group != nil {
		edges = append(edges, group.EdgeLikeFromGroup)
	}
	if m.like_to != nil {
		edges = append(edges, group.EdgeLikeTo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeLikeFromUser:
		ids := make([]ent.Value, 0, len(m.like_from_user))
		for id := range m.like_from_user {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeSaved:
		ids := make([]ent.Value, 0, len(m.saved))
		for id := range m.saved {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeLikeFromGroup:
		ids := make([]ent.Value, 0, len(m.like_from_group))
		for id := range m.like_from_group {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeLikeTo:
		ids := make([]ent.Value, 0, len(m.like_to))
		for id := range m.like_to {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedmembers != nil {
		edges = append(edges, group.EdgeMembers)
	}
	if m.removedlike_from_user != nil {
		edges = append(edges, group.EdgeLikeFromUser)
	}
	if m.removedsaved != nil {
		edges = append(edges, group.EdgeSaved)
	}
	if m.removedlike_from_group != nil {
		edges = append(edges, group.EdgeLikeFromGroup)
	}
	if m.removedlike_to != nil {
		edges = append(edges, group.EdgeLikeTo)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeLikeFromUser:
		ids := make([]ent.Value, 0, len(m.removedlike_from_user))
		for id := range m.removedlike_from_user {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeSaved:
		ids := make([]ent.Value, 0, len(m.removedsaved))
		for id := range m.removedsaved {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeLikeFromGroup:
		ids := make([]ent.Value, 0, len(m.removedlike_from_group))
		for id := range m.removedlike_from_group {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeLikeTo:
		ids := make([]ent.Value, 0, len(m.removedlike_to))
		for id := range m.removedlike_to {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedmembers {
		edges = append(edges, group.EdgeMembers)
	}
	if m.clearedlike_from_user {
		edges = append(edges, group.EdgeLikeFromUser)
	}
	if m.clearedsaved {
		edges = append(edges, group.EdgeSaved)
	}
	if m.clearedlike_from_group {
		edges = append(edges, group.EdgeLikeFromGroup)
	}
	if m.clearedlike_to {
		edges = append(edges, group.EdgeLikeTo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeMembers:
		return m.clearedmembers
	case group.EdgeLikeFromUser:
		return m.clearedlike_from_user
	case group.EdgeSaved:
		return m.clearedsaved
	case group.EdgeLikeFromGroup:
		return m.clearedlike_from_group
	case group.EdgeLikeTo:
		return m.clearedlike_to
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeMembers:
		m.ResetMembers()
		return nil
	case group.EdgeLikeFromUser:
		m.ResetLikeFromUser()
		return nil
	case group.EdgeSaved:
		m.ResetSaved()
		return nil
	case group.EdgeLikeFromGroup:
		m.ResetLikeFromGroup()
		return nil
	case group.EdgeLikeTo:
		m.ResetLikeTo()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *string
	username        *string
	password        *[]byte
	uni             *string
	dep             *string
	bio             *string
	pics            *[]string
	createdAt       *time.Time
	updatedAt       *time.Time
	readAt          *time.Time
	clearedFields   map[string]struct{}
	friends         map[string]struct{}
	removedfriends  map[string]struct{}
	clearedfriends  bool
	like_to         map[string]struct{}
	removedlike_to  map[string]struct{}
	clearedlike_to  bool
	save            map[string]struct{}
	removedsave     map[string]struct{}
	clearedsave     bool
	group           *string
	clearedgroup    bool
	chatroom        map[string]struct{}
	removedchatroom map[string]struct{}
	clearedchatroom bool
	message         map[string]struct{}
	removedmessage  map[string]struct{}
	clearedmessage  bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(b []byte) {
	m.password = &b
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r []byte, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetUni sets the "uni" field.
func (m *UserMutation) SetUni(s string) {
	m.uni = &s
}

// Uni returns the value of the "uni" field in the mutation.
func (m *UserMutation) Uni() (r string, exists bool) {
	v := m.uni
	if v == nil {
		return
	}
	return *v, true
}

// OldUni returns the old "uni" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUni(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUni is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUni requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUni: %w", err)
	}
	return oldValue.Uni, nil
}

// ResetUni resets all changes to the "uni" field.
func (m *UserMutation) ResetUni() {
	m.uni = nil
}

// SetDep sets the "dep" field.
func (m *UserMutation) SetDep(s string) {
	m.dep = &s
}

// Dep returns the value of the "dep" field in the mutation.
func (m *UserMutation) Dep() (r string, exists bool) {
	v := m.dep
	if v == nil {
		return
	}
	return *v, true
}

// OldDep returns the old "dep" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDep(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDep is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDep requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDep: %w", err)
	}
	return oldValue.Dep, nil
}

// ResetDep resets all changes to the "dep" field.
func (m *UserMutation) ResetDep() {
	m.dep = nil
}

// SetBio sets the "bio" field.
func (m *UserMutation) SetBio(s string) {
	m.bio = &s
}

// Bio returns the value of the "bio" field in the mutation.
func (m *UserMutation) Bio() (r string, exists bool) {
	v := m.bio
	if v == nil {
		return
	}
	return *v, true
}

// OldBio returns the old "bio" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBio(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBio: %w", err)
	}
	return oldValue.Bio, nil
}

// ResetBio resets all changes to the "bio" field.
func (m *UserMutation) ResetBio() {
	m.bio = nil
}

// SetPics sets the "pics" field.
func (m *UserMutation) SetPics(s []string) {
	m.pics = &s
}

// Pics returns the value of the "pics" field in the mutation.
func (m *UserMutation) Pics() (r []string, exists bool) {
	v := m.pics
	if v == nil {
		return
	}
	return *v, true
}

// OldPics returns the old "pics" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPics(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPics is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPics requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPics: %w", err)
	}
	return oldValue.Pics, nil
}

// ResetPics resets all changes to the "pics" field.
func (m *UserMutation) ResetPics() {
	m.pics = nil
}

// SetGroupID sets the "group_id" field.
func (m *UserMutation) SetGroupID(s string) {
	m.group = &s
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *UserMutation) GroupID() (r string, exists bool) {
	v := m.group
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupID returns the old "group_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGroupID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupID: %w", err)
	}
	return oldValue.GroupID, nil
}

// ClearGroupID clears the value of the "group_id" field.
func (m *UserMutation) ClearGroupID() {
	m.group = nil
	m.clearedFields[user.FieldGroupID] = struct{}{}
}

// GroupIDCleared returns if the "group_id" field was cleared in this mutation.
func (m *UserMutation) GroupIDCleared() bool {
	_, ok := m.clearedFields[user.FieldGroupID]
	return ok
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *UserMutation) ResetGroupID() {
	m.group = nil
	delete(m.clearedFields, user.FieldGroupID)
}

// SetCreatedAt sets the "createdAt" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *UserMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetReadAt sets the "readAt" field.
func (m *UserMutation) SetReadAt(t time.Time) {
	m.readAt = &t
}

// ReadAt returns the value of the "readAt" field in the mutation.
func (m *UserMutation) ReadAt() (r time.Time, exists bool) {
	v := m.readAt
	if v == nil {
		return
	}
	return *v, true
}

// OldReadAt returns the old "readAt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldReadAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReadAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReadAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReadAt: %w", err)
	}
	return oldValue.ReadAt, nil
}

// ResetReadAt resets all changes to the "readAt" field.
func (m *UserMutation) ResetReadAt() {
	m.readAt = nil
}

// AddFriendIDs adds the "friends" edge to the User entity by ids.
func (m *UserMutation) AddFriendIDs(ids ...string) {
	if m.friends == nil {
		m.friends = make(map[string]struct{})
	}
	for i := range ids {
		m.friends[ids[i]] = struct{}{}
	}
}

// ClearFriends clears the "friends" edge to the User entity.
func (m *UserMutation) ClearFriends() {
	m.clearedfriends = true
}

// FriendsCleared reports if the "friends" edge to the User entity was cleared.
func (m *UserMutation) FriendsCleared() bool {
	return m.clearedfriends
}

// RemoveFriendIDs removes the "friends" edge to the User entity by IDs.
func (m *UserMutation) RemoveFriendIDs(ids ...string) {
	if m.removedfriends == nil {
		m.removedfriends = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.friends, ids[i])
		m.removedfriends[ids[i]] = struct{}{}
	}
}

// RemovedFriends returns the removed IDs of the "friends" edge to the User entity.
func (m *UserMutation) RemovedFriendsIDs() (ids []string) {
	for id := range m.removedfriends {
		ids = append(ids, id)
	}
	return
}

// FriendsIDs returns the "friends" edge IDs in the mutation.
func (m *UserMutation) FriendsIDs() (ids []string) {
	for id := range m.friends {
		ids = append(ids, id)
	}
	return
}

// ResetFriends resets all changes to the "friends" edge.
func (m *UserMutation) ResetFriends() {
	m.friends = nil
	m.clearedfriends = false
	m.removedfriends = nil
}

// AddLikeToIDs adds the "like_to" edge to the Group entity by ids.
func (m *UserMutation) AddLikeToIDs(ids ...string) {
	if m.like_to == nil {
		m.like_to = make(map[string]struct{})
	}
	for i := range ids {
		m.like_to[ids[i]] = struct{}{}
	}
}

// ClearLikeTo clears the "like_to" edge to the Group entity.
func (m *UserMutation) ClearLikeTo() {
	m.clearedlike_to = true
}

// LikeToCleared reports if the "like_to" edge to the Group entity was cleared.
func (m *UserMutation) LikeToCleared() bool {
	return m.clearedlike_to
}

// RemoveLikeToIDs removes the "like_to" edge to the Group entity by IDs.
func (m *UserMutation) RemoveLikeToIDs(ids ...string) {
	if m.removedlike_to == nil {
		m.removedlike_to = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.like_to, ids[i])
		m.removedlike_to[ids[i]] = struct{}{}
	}
}

// RemovedLikeTo returns the removed IDs of the "like_to" edge to the Group entity.
func (m *UserMutation) RemovedLikeToIDs() (ids []string) {
	for id := range m.removedlike_to {
		ids = append(ids, id)
	}
	return
}

// LikeToIDs returns the "like_to" edge IDs in the mutation.
func (m *UserMutation) LikeToIDs() (ids []string) {
	for id := range m.like_to {
		ids = append(ids, id)
	}
	return
}

// ResetLikeTo resets all changes to the "like_to" edge.
func (m *UserMutation) ResetLikeTo() {
	m.like_to = nil
	m.clearedlike_to = false
	m.removedlike_to = nil
}

// AddSaveIDs adds the "save" edge to the Group entity by ids.
func (m *UserMutation) AddSaveIDs(ids ...string) {
	if m.save == nil {
		m.save = make(map[string]struct{})
	}
	for i := range ids {
		m.save[ids[i]] = struct{}{}
	}
}

// ClearSave clears the "save" edge to the Group entity.
func (m *UserMutation) ClearSave() {
	m.clearedsave = true
}

// SaveCleared reports if the "save" edge to the Group entity was cleared.
func (m *UserMutation) SaveCleared() bool {
	return m.clearedsave
}

// RemoveSaveIDs removes the "save" edge to the Group entity by IDs.
func (m *UserMutation) RemoveSaveIDs(ids ...string) {
	if m.removedsave == nil {
		m.removedsave = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.save, ids[i])
		m.removedsave[ids[i]] = struct{}{}
	}
}

// RemovedSave returns the removed IDs of the "save" edge to the Group entity.
func (m *UserMutation) RemovedSaveIDs() (ids []string) {
	for id := range m.removedsave {
		ids = append(ids, id)
	}
	return
}

// SaveIDs returns the "save" edge IDs in the mutation.
func (m *UserMutation) SaveIDs() (ids []string) {
	for id := range m.save {
		ids = append(ids, id)
	}
	return
}

// ResetSave resets all changes to the "save" edge.
func (m *UserMutation) ResetSave() {
	m.save = nil
	m.clearedsave = false
	m.removedsave = nil
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *UserMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *UserMutation) GroupCleared() bool {
	return m.GroupIDCleared() || m.clearedgroup
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *UserMutation) GroupIDs() (ids []string) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *UserMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// AddChatroomIDs adds the "chatroom" edge to the ChatRoom entity by ids.
func (m *UserMutation) AddChatroomIDs(ids ...string) {
	if m.chatroom == nil {
		m.chatroom = make(map[string]struct{})
	}
	for i := range ids {
		m.chatroom[ids[i]] = struct{}{}
	}
}

// ClearChatroom clears the "chatroom" edge to the ChatRoom entity.
func (m *UserMutation) ClearChatroom() {
	m.clearedchatroom = true
}

// ChatroomCleared reports if the "chatroom" edge to the ChatRoom entity was cleared.
func (m *UserMutation) ChatroomCleared() bool {
	return m.clearedchatroom
}

// RemoveChatroomIDs removes the "chatroom" edge to the ChatRoom entity by IDs.
func (m *UserMutation) RemoveChatroomIDs(ids ...string) {
	if m.removedchatroom == nil {
		m.removedchatroom = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.chatroom, ids[i])
		m.removedchatroom[ids[i]] = struct{}{}
	}
}

// RemovedChatroom returns the removed IDs of the "chatroom" edge to the ChatRoom entity.
func (m *UserMutation) RemovedChatroomIDs() (ids []string) {
	for id := range m.removedchatroom {
		ids = append(ids, id)
	}
	return
}

// ChatroomIDs returns the "chatroom" edge IDs in the mutation.
func (m *UserMutation) ChatroomIDs() (ids []string) {
	for id := range m.chatroom {
		ids = append(ids, id)
	}
	return
}

// ResetChatroom resets all changes to the "chatroom" edge.
func (m *UserMutation) ResetChatroom() {
	m.chatroom = nil
	m.clearedchatroom = false
	m.removedchatroom = nil
}

// AddMessageIDs adds the "message" edge to the ChatMessage entity by ids.
func (m *UserMutation) AddMessageIDs(ids ...string) {
	if m.message == nil {
		m.message = make(map[string]struct{})
	}
	for i := range ids {
		m.message[ids[i]] = struct{}{}
	}
}

// ClearMessage clears the "message" edge to the ChatMessage entity.
func (m *UserMutation) ClearMessage() {
	m.clearedmessage = true
}

// MessageCleared reports if the "message" edge to the ChatMessage entity was cleared.
func (m *UserMutation) MessageCleared() bool {
	return m.clearedmessage
}

// RemoveMessageIDs removes the "message" edge to the ChatMessage entity by IDs.
func (m *UserMutation) RemoveMessageIDs(ids ...string) {
	if m.removedmessage == nil {
		m.removedmessage = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.message, ids[i])
		m.removedmessage[ids[i]] = struct{}{}
	}
}

// RemovedMessage returns the removed IDs of the "message" edge to the ChatMessage entity.
func (m *UserMutation) RemovedMessageIDs() (ids []string) {
	for id := range m.removedmessage {
		ids = append(ids, id)
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
func (m *UserMutation) MessageIDs() (ids []string) {
	for id := range m.message {
		ids = append(ids, id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *UserMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
	m.removedmessage = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.uni != nil {
		fields = append(fields, user.FieldUni)
	}
	if m.dep != nil {
		fields = append(fields, user.FieldDep)
	}
	if m.bio != nil {
		fields = append(fields, user.FieldBio)
	}
	if m.pics != nil {
		fields = append(fields, user.FieldPics)
	}
	if m.group != nil {
		fields = append(fields, user.FieldGroupID)
	}
	if m.createdAt != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.readAt != nil {
		fields = append(fields, user.FieldReadAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldUni:
		return m.Uni()
	case user.FieldDep:
		return m.Dep()
	case user.FieldBio:
		return m.Bio()
	case user.FieldPics:
		return m.Pics()
	case user.FieldGroupID:
		return m.GroupID()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldReadAt:
		return m.ReadAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldUni:
		return m.OldUni(ctx)
	case user.FieldDep:
		return m.OldDep(ctx)
	case user.FieldBio:
		return m.OldBio(ctx)
	case user.FieldPics:
		return m.OldPics(ctx)
	case user.FieldGroupID:
		return m.OldGroupID(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldReadAt:
		return m.OldReadAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldUni:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUni(v)
		return nil
	case user.FieldDep:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDep(v)
		return nil
	case user.FieldBio:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBio(v)
		return nil
	case user.FieldPics:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPics(v)
		return nil
	case user.FieldGroupID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldReadAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReadAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldGroupID) {
		fields = append(fields, user.FieldGroupID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldGroupID:
		m.ClearGroupID()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldUni:
		m.ResetUni()
		return nil
	case user.FieldDep:
		m.ResetDep()
		return nil
	case user.FieldBio:
		m.ResetBio()
		return nil
	case user.FieldPics:
		m.ResetPics()
		return nil
	case user.FieldGroupID:
		m.ResetGroupID()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldReadAt:
		m.ResetReadAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.friends != nil {
		edges = append(edges, user.EdgeFriends)
	}
	if m.like_to != nil {
		edges = append(edges, user.EdgeLikeTo)
	}
	if m.save != nil {
		edges = append(edges, user.EdgeSave)
	}
	if m.group != nil {
		edges = append(edges, user.EdgeGroup)
	}
	if m.chatroom != nil {
		edges = append(edges, user.EdgeChatroom)
	}
	if m.message != nil {
		edges = append(edges, user.EdgeMessage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFriends:
		ids := make([]ent.Value, 0, len(m.friends))
		for id := range m.friends {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikeTo:
		ids := make([]ent.Value, 0, len(m.like_to))
		for id := range m.like_to {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSave:
		ids := make([]ent.Value, 0, len(m.save))
		for id := range m.save {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeChatroom:
		ids := make([]ent.Value, 0, len(m.chatroom))
		for id := range m.chatroom {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMessage:
		ids := make([]ent.Value, 0, len(m.message))
		for id := range m.message {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedfriends != nil {
		edges = append(edges, user.EdgeFriends)
	}
	if m.removedlike_to != nil {
		edges = append(edges, user.EdgeLikeTo)
	}
	if m.removedsave != nil {
		edges = append(edges, user.EdgeSave)
	}
	if m.removedchatroom != nil {
		edges = append(edges, user.EdgeChatroom)
	}
	if m.removedmessage != nil {
		edges = append(edges, user.EdgeMessage)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFriends:
		ids := make([]ent.Value, 0, len(m.removedfriends))
		for id := range m.removedfriends {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikeTo:
		ids := make([]ent.Value, 0, len(m.removedlike_to))
		for id := range m.removedlike_to {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSave:
		ids := make([]ent.Value, 0, len(m.removedsave))
		for id := range m.removedsave {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeChatroom:
		ids := make([]ent.Value, 0, len(m.removedchatroom))
		for id := range m.removedchatroom {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMessage:
		ids := make([]ent.Value, 0, len(m.removedmessage))
		for id := range m.removedmessage {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedfriends {
		edges = append(edges, user.EdgeFriends)
	}
	if m.clearedlike_to {
		edges = append(edges, user.EdgeLikeTo)
	}
	if m.clearedsave {
		edges = append(edges, user.EdgeSave)
	}
	if m.clearedgroup {
		edges = append(edges, user.EdgeGroup)
	}
	if m.clearedchatroom {
		edges = append(edges, user.EdgeChatroom)
	}
	if m.clearedmessage {
		edges = append(edges, user.EdgeMessage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeFriends:
		return m.clearedfriends
	case user.EdgeLikeTo:
		return m.clearedlike_to
	case user.EdgeSave:
		return m.clearedsave
	case user.EdgeGroup:
		return m.clearedgroup
	case user.EdgeChatroom:
		return m.clearedchatroom
	case user.EdgeMessage:
		return m.clearedmessage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeFriends:
		m.ResetFriends()
		return nil
	case user.EdgeLikeTo:
		m.ResetLikeTo()
		return nil
	case user.EdgeSave:
		m.ResetSave()
		return nil
	case user.EdgeGroup:
		m.ResetGroup()
		return nil
	case user.EdgeChatroom:
		m.ResetChatroom()
		return nil
	case user.EdgeMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
