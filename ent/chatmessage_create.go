// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lxxonx/cinder-server/ent/chatmessage"
	"github.com/lxxonx/cinder-server/ent/chatroom"
	"github.com/lxxonx/cinder-server/ent/user"
)

// ChatMessageCreate is the builder for creating a ChatMessage entity.
type ChatMessageCreate struct {
	config
	mutation *ChatMessageMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (cmc *ChatMessageCreate) SetUID(s string) *ChatMessageCreate {
	cmc.mutation.SetUID(s)
	return cmc
}

// SetMessage sets the "message" field.
func (cmc *ChatMessageCreate) SetMessage(s string) *ChatMessageCreate {
	cmc.mutation.SetMessage(s)
	return cmc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cmc *ChatMessageCreate) SetNillableMessage(s *string) *ChatMessageCreate {
	if s != nil {
		cmc.SetMessage(*s)
	}
	return cmc
}

// SetRoomID sets the "room_id" field.
func (cmc *ChatMessageCreate) SetRoomID(i int) *ChatMessageCreate {
	cmc.mutation.SetRoomID(i)
	return cmc
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (cmc *ChatMessageCreate) SetNillableRoomID(i *int) *ChatMessageCreate {
	if i != nil {
		cmc.SetRoomID(*i)
	}
	return cmc
}

// SetUserID sets the "user_id" field.
func (cmc *ChatMessageCreate) SetUserID(i int) *ChatMessageCreate {
	cmc.mutation.SetUserID(i)
	return cmc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cmc *ChatMessageCreate) SetNillableUserID(i *int) *ChatMessageCreate {
	if i != nil {
		cmc.SetUserID(*i)
	}
	return cmc
}

// SetCreatedAt sets the "createdAt" field.
func (cmc *ChatMessageCreate) SetCreatedAt(t time.Time) *ChatMessageCreate {
	cmc.mutation.SetCreatedAt(t)
	return cmc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (cmc *ChatMessageCreate) SetNillableCreatedAt(t *time.Time) *ChatMessageCreate {
	if t != nil {
		cmc.SetCreatedAt(*t)
	}
	return cmc
}

// SetReadAt sets the "readAt" field.
func (cmc *ChatMessageCreate) SetReadAt(t time.Time) *ChatMessageCreate {
	cmc.mutation.SetReadAt(t)
	return cmc
}

// SetNillableReadAt sets the "readAt" field if the given value is not nil.
func (cmc *ChatMessageCreate) SetNillableReadAt(t *time.Time) *ChatMessageCreate {
	if t != nil {
		cmc.SetReadAt(*t)
	}
	return cmc
}

// SetUser sets the "user" edge to the User entity.
func (cmc *ChatMessageCreate) SetUser(u *User) *ChatMessageCreate {
	return cmc.SetUserID(u.ID)
}

// SetRoom sets the "room" edge to the ChatRoom entity.
func (cmc *ChatMessageCreate) SetRoom(c *ChatRoom) *ChatMessageCreate {
	return cmc.SetRoomID(c.ID)
}

// Mutation returns the ChatMessageMutation object of the builder.
func (cmc *ChatMessageCreate) Mutation() *ChatMessageMutation {
	return cmc.mutation
}

// Save creates the ChatMessage in the database.
func (cmc *ChatMessageCreate) Save(ctx context.Context) (*ChatMessage, error) {
	var (
		err  error
		node *ChatMessage
	)
	cmc.defaults()
	if len(cmc.hooks) == 0 {
		if err = cmc.check(); err != nil {
			return nil, err
		}
		node, err = cmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChatMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmc.check(); err != nil {
				return nil, err
			}
			cmc.mutation = mutation
			if node, err = cmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cmc.hooks) - 1; i >= 0; i-- {
			if cmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *ChatMessageCreate) SaveX(ctx context.Context) *ChatMessage {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *ChatMessageCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *ChatMessageCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmc *ChatMessageCreate) defaults() {
	if _, ok := cmc.mutation.Message(); !ok {
		v := chatmessage.DefaultMessage
		cmc.mutation.SetMessage(v)
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		v := chatmessage.DefaultCreatedAt()
		cmc.mutation.SetCreatedAt(v)
	}
	if _, ok := cmc.mutation.ReadAt(); !ok {
		v := chatmessage.DefaultReadAt()
		cmc.mutation.SetReadAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *ChatMessageCreate) check() error {
	if _, ok := cmc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "ChatMessage.uid"`)}
	}
	if _, ok := cmc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "ChatMessage.message"`)}
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "ChatMessage.createdAt"`)}
	}
	if _, ok := cmc.mutation.ReadAt(); !ok {
		return &ValidationError{Name: "readAt", err: errors.New(`ent: missing required field "ChatMessage.readAt"`)}
	}
	return nil
}

func (cmc *ChatMessageCreate) sqlSave(ctx context.Context) (*ChatMessage, error) {
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cmc *ChatMessageCreate) createSpec() (*ChatMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatMessage{config: cmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: chatmessage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chatmessage.FieldID,
			},
		}
	)
	if value, ok := cmc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chatmessage.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := cmc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chatmessage.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := cmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chatmessage.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cmc.mutation.ReadAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chatmessage.FieldReadAt,
		})
		_node.ReadAt = value
	}
	if nodes := cmc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.UserTable,
			Columns: []string{chatmessage.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.RoomTable,
			Columns: []string{chatmessage.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chatroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoomID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChatMessageCreateBulk is the builder for creating many ChatMessage entities in bulk.
type ChatMessageCreateBulk struct {
	config
	builders []*ChatMessageCreate
}

// Save creates the ChatMessage entities in the database.
func (cmcb *ChatMessageCreateBulk) Save(ctx context.Context) ([]*ChatMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*ChatMessage, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *ChatMessageCreateBulk) SaveX(ctx context.Context) []*ChatMessage {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *ChatMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *ChatMessageCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
