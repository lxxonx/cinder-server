// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lxxonx/cinder-server/ent/chatmessage"
	"github.com/lxxonx/cinder-server/ent/chatroom"
	"github.com/lxxonx/cinder-server/ent/predicate"
	"github.com/lxxonx/cinder-server/ent/user"
)

// ChatRoomQuery is the builder for querying ChatRoom entities.
type ChatRoomQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ChatRoom
	// eager-loading edges.
	withParticipants *UserQuery
	withMessages     *ChatMessageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ChatRoomQuery builder.
func (crq *ChatRoomQuery) Where(ps ...predicate.ChatRoom) *ChatRoomQuery {
	crq.predicates = append(crq.predicates, ps...)
	return crq
}

// Limit adds a limit step to the query.
func (crq *ChatRoomQuery) Limit(limit int) *ChatRoomQuery {
	crq.limit = &limit
	return crq
}

// Offset adds an offset step to the query.
func (crq *ChatRoomQuery) Offset(offset int) *ChatRoomQuery {
	crq.offset = &offset
	return crq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (crq *ChatRoomQuery) Unique(unique bool) *ChatRoomQuery {
	crq.unique = &unique
	return crq
}

// Order adds an order step to the query.
func (crq *ChatRoomQuery) Order(o ...OrderFunc) *ChatRoomQuery {
	crq.order = append(crq.order, o...)
	return crq
}

// QueryParticipants chains the current query on the "participants" edge.
func (crq *ChatRoomQuery) QueryParticipants() *UserQuery {
	query := &UserQuery{config: crq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(chatroom.Table, chatroom.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, chatroom.ParticipantsTable, chatroom.ParticipantsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(crq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMessages chains the current query on the "messages" edge.
func (crq *ChatRoomQuery) QueryMessages() *ChatMessageQuery {
	query := &ChatMessageQuery{config: crq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(chatroom.Table, chatroom.FieldID, selector),
			sqlgraph.To(chatmessage.Table, chatmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chatroom.MessagesTable, chatroom.MessagesColumn),
		)
		fromU = sqlgraph.SetNeighbors(crq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ChatRoom entity from the query.
// Returns a *NotFoundError when no ChatRoom was found.
func (crq *ChatRoomQuery) First(ctx context.Context) (*ChatRoom, error) {
	nodes, err := crq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{chatroom.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (crq *ChatRoomQuery) FirstX(ctx context.Context) *ChatRoom {
	node, err := crq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ChatRoom ID from the query.
// Returns a *NotFoundError when no ChatRoom ID was found.
func (crq *ChatRoomQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = crq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{chatroom.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (crq *ChatRoomQuery) FirstIDX(ctx context.Context) string {
	id, err := crq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ChatRoom entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ChatRoom entity is not found.
// Returns a *NotFoundError when no ChatRoom entities are found.
func (crq *ChatRoomQuery) Only(ctx context.Context) (*ChatRoom, error) {
	nodes, err := crq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{chatroom.Label}
	default:
		return nil, &NotSingularError{chatroom.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (crq *ChatRoomQuery) OnlyX(ctx context.Context) *ChatRoom {
	node, err := crq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ChatRoom ID in the query.
// Returns a *NotSingularError when exactly one ChatRoom ID is not found.
// Returns a *NotFoundError when no entities are found.
func (crq *ChatRoomQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = crq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{chatroom.Label}
	default:
		err = &NotSingularError{chatroom.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (crq *ChatRoomQuery) OnlyIDX(ctx context.Context) string {
	id, err := crq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ChatRooms.
func (crq *ChatRoomQuery) All(ctx context.Context) ([]*ChatRoom, error) {
	if err := crq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return crq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (crq *ChatRoomQuery) AllX(ctx context.Context) []*ChatRoom {
	nodes, err := crq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ChatRoom IDs.
func (crq *ChatRoomQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := crq.Select(chatroom.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (crq *ChatRoomQuery) IDsX(ctx context.Context) []string {
	ids, err := crq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (crq *ChatRoomQuery) Count(ctx context.Context) (int, error) {
	if err := crq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return crq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (crq *ChatRoomQuery) CountX(ctx context.Context) int {
	count, err := crq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (crq *ChatRoomQuery) Exist(ctx context.Context) (bool, error) {
	if err := crq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return crq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (crq *ChatRoomQuery) ExistX(ctx context.Context) bool {
	exist, err := crq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ChatRoomQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (crq *ChatRoomQuery) Clone() *ChatRoomQuery {
	if crq == nil {
		return nil
	}
	return &ChatRoomQuery{
		config:           crq.config,
		limit:            crq.limit,
		offset:           crq.offset,
		order:            append([]OrderFunc{}, crq.order...),
		predicates:       append([]predicate.ChatRoom{}, crq.predicates...),
		withParticipants: crq.withParticipants.Clone(),
		withMessages:     crq.withMessages.Clone(),
		// clone intermediate query.
		sql:  crq.sql.Clone(),
		path: crq.path,
	}
}

// WithParticipants tells the query-builder to eager-load the nodes that are connected to
// the "participants" edge. The optional arguments are used to configure the query builder of the edge.
func (crq *ChatRoomQuery) WithParticipants(opts ...func(*UserQuery)) *ChatRoomQuery {
	query := &UserQuery{config: crq.config}
	for _, opt := range opts {
		opt(query)
	}
	crq.withParticipants = query
	return crq
}

// WithMessages tells the query-builder to eager-load the nodes that are connected to
// the "messages" edge. The optional arguments are used to configure the query builder of the edge.
func (crq *ChatRoomQuery) WithMessages(opts ...func(*ChatMessageQuery)) *ChatRoomQuery {
	query := &ChatMessageQuery{config: crq.config}
	for _, opt := range opts {
		opt(query)
	}
	crq.withMessages = query
	return crq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ChatRoom.Query().
//		GroupBy(chatroom.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (crq *ChatRoomQuery) GroupBy(field string, fields ...string) *ChatRoomGroupBy {
	group := &ChatRoomGroupBy{config: crq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := crq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return crq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty"`
//	}
//
//	client.ChatRoom.Query().
//		Select(chatroom.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (crq *ChatRoomQuery) Select(fields ...string) *ChatRoomSelect {
	crq.fields = append(crq.fields, fields...)
	return &ChatRoomSelect{ChatRoomQuery: crq}
}

func (crq *ChatRoomQuery) prepareQuery(ctx context.Context) error {
	for _, f := range crq.fields {
		if !chatroom.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if crq.path != nil {
		prev, err := crq.path(ctx)
		if err != nil {
			return err
		}
		crq.sql = prev
	}
	return nil
}

func (crq *ChatRoomQuery) sqlAll(ctx context.Context) ([]*ChatRoom, error) {
	var (
		nodes       = []*ChatRoom{}
		_spec       = crq.querySpec()
		loadedTypes = [2]bool{
			crq.withParticipants != nil,
			crq.withMessages != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ChatRoom{config: crq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, crq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := crq.withParticipants; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[string]*ChatRoom, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Participants = []*User{}
		}
		var (
			edgeids []string
			edges   = make(map[string][]*ChatRoom)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   chatroom.ParticipantsTable,
				Columns: chatroom.ParticipantsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(chatroom.ParticipantsPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullString), new(sql.NullString)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullString)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullString)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := eout.String
				inValue := ein.String
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, crq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "participants": %w`, err)
		}
		query.Where(user.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "participants" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Participants = append(nodes[i].Edges.Participants, n)
			}
		}
	}

	if query := crq.withMessages; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*ChatRoom)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Messages = []*ChatMessage{}
		}
		query.Where(predicate.ChatMessage(func(s *sql.Selector) {
			s.Where(sql.InValues(chatroom.MessagesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.RoomID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "room_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Messages = append(node.Edges.Messages, n)
		}
	}

	return nodes, nil
}

func (crq *ChatRoomQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := crq.querySpec()
	_spec.Node.Columns = crq.fields
	if len(crq.fields) > 0 {
		_spec.Unique = crq.unique != nil && *crq.unique
	}
	return sqlgraph.CountNodes(ctx, crq.driver, _spec)
}

func (crq *ChatRoomQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := crq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (crq *ChatRoomQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chatroom.Table,
			Columns: chatroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: chatroom.FieldID,
			},
		},
		From:   crq.sql,
		Unique: true,
	}
	if unique := crq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := crq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatroom.FieldID)
		for i := range fields {
			if fields[i] != chatroom.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := crq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := crq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := crq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := crq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (crq *ChatRoomQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(crq.driver.Dialect())
	t1 := builder.Table(chatroom.Table)
	columns := crq.fields
	if len(columns) == 0 {
		columns = chatroom.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if crq.sql != nil {
		selector = crq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if crq.unique != nil && *crq.unique {
		selector.Distinct()
	}
	for _, p := range crq.predicates {
		p(selector)
	}
	for _, p := range crq.order {
		p(selector)
	}
	if offset := crq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := crq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ChatRoomGroupBy is the group-by builder for ChatRoom entities.
type ChatRoomGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (crgb *ChatRoomGroupBy) Aggregate(fns ...AggregateFunc) *ChatRoomGroupBy {
	crgb.fns = append(crgb.fns, fns...)
	return crgb
}

// Scan applies the group-by query and scans the result into the given value.
func (crgb *ChatRoomGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := crgb.path(ctx)
	if err != nil {
		return err
	}
	crgb.sql = query
	return crgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (crgb *ChatRoomGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := crgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (crgb *ChatRoomGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(crgb.fields) > 1 {
		return nil, errors.New("ent: ChatRoomGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := crgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (crgb *ChatRoomGroupBy) StringsX(ctx context.Context) []string {
	v, err := crgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (crgb *ChatRoomGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = crgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{chatroom.Label}
	default:
		err = fmt.Errorf("ent: ChatRoomGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (crgb *ChatRoomGroupBy) StringX(ctx context.Context) string {
	v, err := crgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (crgb *ChatRoomGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(crgb.fields) > 1 {
		return nil, errors.New("ent: ChatRoomGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := crgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (crgb *ChatRoomGroupBy) IntsX(ctx context.Context) []int {
	v, err := crgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (crgb *ChatRoomGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = crgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{chatroom.Label}
	default:
		err = fmt.Errorf("ent: ChatRoomGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (crgb *ChatRoomGroupBy) IntX(ctx context.Context) int {
	v, err := crgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (crgb *ChatRoomGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(crgb.fields) > 1 {
		return nil, errors.New("ent: ChatRoomGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := crgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (crgb *ChatRoomGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := crgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (crgb *ChatRoomGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = crgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{chatroom.Label}
	default:
		err = fmt.Errorf("ent: ChatRoomGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (crgb *ChatRoomGroupBy) Float64X(ctx context.Context) float64 {
	v, err := crgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (crgb *ChatRoomGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(crgb.fields) > 1 {
		return nil, errors.New("ent: ChatRoomGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := crgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (crgb *ChatRoomGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := crgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (crgb *ChatRoomGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = crgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{chatroom.Label}
	default:
		err = fmt.Errorf("ent: ChatRoomGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (crgb *ChatRoomGroupBy) BoolX(ctx context.Context) bool {
	v, err := crgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (crgb *ChatRoomGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range crgb.fields {
		if !chatroom.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := crgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (crgb *ChatRoomGroupBy) sqlQuery() *sql.Selector {
	selector := crgb.sql.Select()
	aggregation := make([]string, 0, len(crgb.fns))
	for _, fn := range crgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(crgb.fields)+len(crgb.fns))
		for _, f := range crgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(crgb.fields...)...)
}

// ChatRoomSelect is the builder for selecting fields of ChatRoom entities.
type ChatRoomSelect struct {
	*ChatRoomQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (crs *ChatRoomSelect) Scan(ctx context.Context, v interface{}) error {
	if err := crs.prepareQuery(ctx); err != nil {
		return err
	}
	crs.sql = crs.ChatRoomQuery.sqlQuery(ctx)
	return crs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (crs *ChatRoomSelect) ScanX(ctx context.Context, v interface{}) {
	if err := crs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (crs *ChatRoomSelect) Strings(ctx context.Context) ([]string, error) {
	if len(crs.fields) > 1 {
		return nil, errors.New("ent: ChatRoomSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := crs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (crs *ChatRoomSelect) StringsX(ctx context.Context) []string {
	v, err := crs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (crs *ChatRoomSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = crs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{chatroom.Label}
	default:
		err = fmt.Errorf("ent: ChatRoomSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (crs *ChatRoomSelect) StringX(ctx context.Context) string {
	v, err := crs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (crs *ChatRoomSelect) Ints(ctx context.Context) ([]int, error) {
	if len(crs.fields) > 1 {
		return nil, errors.New("ent: ChatRoomSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := crs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (crs *ChatRoomSelect) IntsX(ctx context.Context) []int {
	v, err := crs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (crs *ChatRoomSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = crs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{chatroom.Label}
	default:
		err = fmt.Errorf("ent: ChatRoomSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (crs *ChatRoomSelect) IntX(ctx context.Context) int {
	v, err := crs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (crs *ChatRoomSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(crs.fields) > 1 {
		return nil, errors.New("ent: ChatRoomSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := crs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (crs *ChatRoomSelect) Float64sX(ctx context.Context) []float64 {
	v, err := crs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (crs *ChatRoomSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = crs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{chatroom.Label}
	default:
		err = fmt.Errorf("ent: ChatRoomSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (crs *ChatRoomSelect) Float64X(ctx context.Context) float64 {
	v, err := crs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (crs *ChatRoomSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(crs.fields) > 1 {
		return nil, errors.New("ent: ChatRoomSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := crs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (crs *ChatRoomSelect) BoolsX(ctx context.Context) []bool {
	v, err := crs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (crs *ChatRoomSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = crs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{chatroom.Label}
	default:
		err = fmt.Errorf("ent: ChatRoomSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (crs *ChatRoomSelect) BoolX(ctx context.Context) bool {
	v, err := crs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (crs *ChatRoomSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := crs.sql.Query()
	if err := crs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
