// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lxxonx/cinder-server/ent/chatmessage"
	"github.com/lxxonx/cinder-server/ent/chatroom"
	"github.com/lxxonx/cinder-server/ent/predicate"
	"github.com/lxxonx/cinder-server/ent/user"
)

// ChatRoomUpdate is the builder for updating ChatRoom entities.
type ChatRoomUpdate struct {
	config
	hooks    []Hook
	mutation *ChatRoomMutation
}

// Where appends a list predicates to the ChatRoomUpdate builder.
func (cru *ChatRoomUpdate) Where(ps ...predicate.ChatRoom) *ChatRoomUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetUpdatedAt sets the "updated_at" field.
func (cru *ChatRoomUpdate) SetUpdatedAt(t time.Time) *ChatRoomUpdate {
	cru.mutation.SetUpdatedAt(t)
	return cru
}

// SetReadAt sets the "read_at" field.
func (cru *ChatRoomUpdate) SetReadAt(t time.Time) *ChatRoomUpdate {
	cru.mutation.SetReadAt(t)
	return cru
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (cru *ChatRoomUpdate) SetNillableReadAt(t *time.Time) *ChatRoomUpdate {
	if t != nil {
		cru.SetReadAt(*t)
	}
	return cru
}

// AddParticipantIDs adds the "participants" edge to the User entity by IDs.
func (cru *ChatRoomUpdate) AddParticipantIDs(ids ...string) *ChatRoomUpdate {
	cru.mutation.AddParticipantIDs(ids...)
	return cru
}

// AddParticipants adds the "participants" edges to the User entity.
func (cru *ChatRoomUpdate) AddParticipants(u ...*User) *ChatRoomUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cru.AddParticipantIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the ChatMessage entity by IDs.
func (cru *ChatRoomUpdate) AddMessageIDs(ids ...uuid.UUID) *ChatRoomUpdate {
	cru.mutation.AddMessageIDs(ids...)
	return cru
}

// AddMessages adds the "messages" edges to the ChatMessage entity.
func (cru *ChatRoomUpdate) AddMessages(c ...*ChatMessage) *ChatRoomUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cru.AddMessageIDs(ids...)
}

// Mutation returns the ChatRoomMutation object of the builder.
func (cru *ChatRoomUpdate) Mutation() *ChatRoomMutation {
	return cru.mutation
}

// ClearParticipants clears all "participants" edges to the User entity.
func (cru *ChatRoomUpdate) ClearParticipants() *ChatRoomUpdate {
	cru.mutation.ClearParticipants()
	return cru
}

// RemoveParticipantIDs removes the "participants" edge to User entities by IDs.
func (cru *ChatRoomUpdate) RemoveParticipantIDs(ids ...string) *ChatRoomUpdate {
	cru.mutation.RemoveParticipantIDs(ids...)
	return cru
}

// RemoveParticipants removes "participants" edges to User entities.
func (cru *ChatRoomUpdate) RemoveParticipants(u ...*User) *ChatRoomUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cru.RemoveParticipantIDs(ids...)
}

// ClearMessages clears all "messages" edges to the ChatMessage entity.
func (cru *ChatRoomUpdate) ClearMessages() *ChatRoomUpdate {
	cru.mutation.ClearMessages()
	return cru
}

// RemoveMessageIDs removes the "messages" edge to ChatMessage entities by IDs.
func (cru *ChatRoomUpdate) RemoveMessageIDs(ids ...uuid.UUID) *ChatRoomUpdate {
	cru.mutation.RemoveMessageIDs(ids...)
	return cru
}

// RemoveMessages removes "messages" edges to ChatMessage entities.
func (cru *ChatRoomUpdate) RemoveMessages(c ...*ChatMessage) *ChatRoomUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cru.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *ChatRoomUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cru.defaults()
	if len(cru.hooks) == 0 {
		affected, err = cru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChatRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cru.mutation = mutation
			affected, err = cru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cru.hooks) - 1; i >= 0; i-- {
			if cru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cru *ChatRoomUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *ChatRoomUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *ChatRoomUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cru *ChatRoomUpdate) defaults() {
	if _, ok := cru.mutation.UpdatedAt(); !ok {
		v := chatroom.UpdateDefaultUpdatedAt()
		cru.mutation.SetUpdatedAt(v)
	}
}

func (cru *ChatRoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chatroom.Table,
			Columns: chatroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: chatroom.FieldID,
			},
		},
	}
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chatroom.FieldUpdatedAt,
		})
	}
	if value, ok := cru.mutation.ReadAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chatroom.FieldReadAt,
		})
	}
	if cru.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chatroom.ParticipantsTable,
			Columns: chatroom.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !cru.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chatroom.ParticipantsTable,
			Columns: chatroom.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chatroom.ParticipantsTable,
			Columns: chatroom.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: chatmessage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !cru.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: chatmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: chatmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatroom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ChatRoomUpdateOne is the builder for updating a single ChatRoom entity.
type ChatRoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatRoomMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cruo *ChatRoomUpdateOne) SetUpdatedAt(t time.Time) *ChatRoomUpdateOne {
	cruo.mutation.SetUpdatedAt(t)
	return cruo
}

// SetReadAt sets the "read_at" field.
func (cruo *ChatRoomUpdateOne) SetReadAt(t time.Time) *ChatRoomUpdateOne {
	cruo.mutation.SetReadAt(t)
	return cruo
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (cruo *ChatRoomUpdateOne) SetNillableReadAt(t *time.Time) *ChatRoomUpdateOne {
	if t != nil {
		cruo.SetReadAt(*t)
	}
	return cruo
}

// AddParticipantIDs adds the "participants" edge to the User entity by IDs.
func (cruo *ChatRoomUpdateOne) AddParticipantIDs(ids ...string) *ChatRoomUpdateOne {
	cruo.mutation.AddParticipantIDs(ids...)
	return cruo
}

// AddParticipants adds the "participants" edges to the User entity.
func (cruo *ChatRoomUpdateOne) AddParticipants(u ...*User) *ChatRoomUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cruo.AddParticipantIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the ChatMessage entity by IDs.
func (cruo *ChatRoomUpdateOne) AddMessageIDs(ids ...uuid.UUID) *ChatRoomUpdateOne {
	cruo.mutation.AddMessageIDs(ids...)
	return cruo
}

// AddMessages adds the "messages" edges to the ChatMessage entity.
func (cruo *ChatRoomUpdateOne) AddMessages(c ...*ChatMessage) *ChatRoomUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cruo.AddMessageIDs(ids...)
}

// Mutation returns the ChatRoomMutation object of the builder.
func (cruo *ChatRoomUpdateOne) Mutation() *ChatRoomMutation {
	return cruo.mutation
}

// ClearParticipants clears all "participants" edges to the User entity.
func (cruo *ChatRoomUpdateOne) ClearParticipants() *ChatRoomUpdateOne {
	cruo.mutation.ClearParticipants()
	return cruo
}

// RemoveParticipantIDs removes the "participants" edge to User entities by IDs.
func (cruo *ChatRoomUpdateOne) RemoveParticipantIDs(ids ...string) *ChatRoomUpdateOne {
	cruo.mutation.RemoveParticipantIDs(ids...)
	return cruo
}

// RemoveParticipants removes "participants" edges to User entities.
func (cruo *ChatRoomUpdateOne) RemoveParticipants(u ...*User) *ChatRoomUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cruo.RemoveParticipantIDs(ids...)
}

// ClearMessages clears all "messages" edges to the ChatMessage entity.
func (cruo *ChatRoomUpdateOne) ClearMessages() *ChatRoomUpdateOne {
	cruo.mutation.ClearMessages()
	return cruo
}

// RemoveMessageIDs removes the "messages" edge to ChatMessage entities by IDs.
func (cruo *ChatRoomUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *ChatRoomUpdateOne {
	cruo.mutation.RemoveMessageIDs(ids...)
	return cruo
}

// RemoveMessages removes "messages" edges to ChatMessage entities.
func (cruo *ChatRoomUpdateOne) RemoveMessages(c ...*ChatMessage) *ChatRoomUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cruo.RemoveMessageIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *ChatRoomUpdateOne) Select(field string, fields ...string) *ChatRoomUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated ChatRoom entity.
func (cruo *ChatRoomUpdateOne) Save(ctx context.Context) (*ChatRoom, error) {
	var (
		err  error
		node *ChatRoom
	)
	cruo.defaults()
	if len(cruo.hooks) == 0 {
		node, err = cruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChatRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cruo.mutation = mutation
			node, err = cruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cruo.hooks) - 1; i >= 0; i-- {
			if cruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *ChatRoomUpdateOne) SaveX(ctx context.Context) *ChatRoom {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *ChatRoomUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *ChatRoomUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cruo *ChatRoomUpdateOne) defaults() {
	if _, ok := cruo.mutation.UpdatedAt(); !ok {
		v := chatroom.UpdateDefaultUpdatedAt()
		cruo.mutation.SetUpdatedAt(v)
	}
}

func (cruo *ChatRoomUpdateOne) sqlSave(ctx context.Context) (_node *ChatRoom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chatroom.Table,
			Columns: chatroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: chatroom.FieldID,
			},
		},
	}
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatRoom.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatroom.FieldID)
		for _, f := range fields {
			if !chatroom.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatroom.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chatroom.FieldUpdatedAt,
		})
	}
	if value, ok := cruo.mutation.ReadAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chatroom.FieldReadAt,
		})
	}
	if cruo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chatroom.ParticipantsTable,
			Columns: chatroom.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !cruo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chatroom.ParticipantsTable,
			Columns: chatroom.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chatroom.ParticipantsTable,
			Columns: chatroom.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: chatmessage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !cruo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: chatmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: chatmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChatRoom{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatroom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
