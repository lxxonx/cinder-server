// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lxxonx/cinder-server/ent/chatroom"
)

// ChatRoom is the model entity for the ChatRoom schema.
type ChatRoom struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// ReadAt holds the value of the "readAt" field.
	ReadAt time.Time `json:"readAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatRoomQuery when eager-loading is set.
	Edges ChatRoomEdges `json:"edges"`
}

// ChatRoomEdges holds the relations/edges for other nodes in the graph.
type ChatRoomEdges struct {
	// Participants holds the value of the participants edge.
	Participants []*User `json:"participants,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*ChatMessage `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ParticipantsOrErr returns the Participants value or an error if the edge
// was not loaded in eager-loading.
func (e ChatRoomEdges) ParticipantsOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Participants, nil
	}
	return nil, &NotLoadedError{edge: "participants"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e ChatRoomEdges) MessagesOrErr() ([]*ChatMessage, error) {
	if e.loadedTypes[1] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatRoom) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatroom.FieldID:
			values[i] = new(sql.NullInt64)
		case chatroom.FieldUID:
			values[i] = new(sql.NullString)
		case chatroom.FieldCreatedAt, chatroom.FieldUpdatedAt, chatroom.FieldReadAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChatRoom", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatRoom fields.
func (cr *ChatRoom) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatroom.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case chatroom.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				cr.UID = value.String
			}
		case chatroom.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cr.CreatedAt = value.Time
			}
		case chatroom.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cr.UpdatedAt = value.Time
			}
		case chatroom.FieldReadAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field readAt", values[i])
			} else if value.Valid {
				cr.ReadAt = value.Time
			}
		}
	}
	return nil
}

// QueryParticipants queries the "participants" edge of the ChatRoom entity.
func (cr *ChatRoom) QueryParticipants() *UserQuery {
	return (&ChatRoomClient{config: cr.config}).QueryParticipants(cr)
}

// QueryMessages queries the "messages" edge of the ChatRoom entity.
func (cr *ChatRoom) QueryMessages() *ChatMessageQuery {
	return (&ChatRoomClient{config: cr.config}).QueryMessages(cr)
}

// Update returns a builder for updating this ChatRoom.
// Note that you need to call ChatRoom.Unwrap() before calling this method if this ChatRoom
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *ChatRoom) Update() *ChatRoomUpdateOne {
	return (&ChatRoomClient{config: cr.config}).UpdateOne(cr)
}

// Unwrap unwraps the ChatRoom entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *ChatRoom) Unwrap() *ChatRoom {
	tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatRoom is not a transactional entity")
	}
	cr.config.driver = tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *ChatRoom) String() string {
	var builder strings.Builder
	builder.WriteString("ChatRoom(")
	builder.WriteString(fmt.Sprintf("id=%v", cr.ID))
	builder.WriteString(", uid=")
	builder.WriteString(cr.UID)
	builder.WriteString(", createdAt=")
	builder.WriteString(cr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(cr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", readAt=")
	builder.WriteString(cr.ReadAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChatRooms is a parsable slice of ChatRoom.
type ChatRooms []*ChatRoom

func (cr ChatRooms) config(cfg config) {
	for _i := range cr {
		cr[_i].config = cfg
	}
}
